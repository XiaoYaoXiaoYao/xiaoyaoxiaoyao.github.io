<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoYao_博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaoyaoxiaoyao.github.io/"/>
  <updated>2019-12-29T05:09:17.897Z</updated>
  <id>https://xiaoyaoxiaoyao.github.io/</id>
  
  <author>
    <name>XiaoYao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试真题</title>
    <link href="https://xiaoyaoxiaoyao.github.io/2019/12/15/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%98/"/>
    <id>https://xiaoyaoxiaoyao.github.io/2019/12/15/%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%98/</id>
    <published>2019-12-15T07:49:36.000Z</published>
    <updated>2019-12-29T05:09:17.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a><code>JavaSE</code></h2><h3 id="1-final-finally-finalize的区别"><a href="#1-final-finally-finalize的区别" class="headerlink" title="1.final ,finally,finalize的区别"></a>1.final ,finally,finalize的区别</h3><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191215155412.png" alt=""></p><h3 id="2-equals和”-”-的区别"><a href="#2-equals和”-”-的区别" class="headerlink" title="2.equals和”==” 的区别?"></a>2.equals和”==” 的区别?</h3><h3 id="3-简述Spring事务的隔离级别"><a href="#3-简述Spring事务的隔离级别" class="headerlink" title="3.简述Spring事务的隔离级别"></a>3.简述Spring事务的隔离级别</h3><h3 id="4-写出不低于三种单例模式的实现方式"><a href="#4-写出不低于三种单例模式的实现方式" class="headerlink" title="4.写出不低于三种单例模式的实现方式"></a>4.写出不低于三种单例模式的实现方式</h3><h3 id="5-多线程有几种实现方法-同步有几种实现方法"><a href="#5-多线程有几种实现方法-同步有几种实现方法" class="headerlink" title="5.多线程有几种实现方法?同步有几种实现方法?"></a>5.多线程有几种实现方法?同步有几种实现方法?</h3><h3 id="6-Http请求的get和post方式的区别"><a href="#6-Http请求的get和post方式的区别" class="headerlink" title="6.Http请求的get和post方式的区别?"></a>6.Http请求的get和post方式的区别?</h3><h3 id="7-说一说Servlet的生命周期"><a href="#7-说一说Servlet的生命周期" class="headerlink" title="7.说一说Servlet的生命周期?"></a>7.说一说Servlet的生命周期?</h3><h3 id="8-MVC单词全拼及作用"><a href="#8-MVC单词全拼及作用" class="headerlink" title="8.MVC单词全拼及作用?"></a>8.MVC单词全拼及作用?</h3><h3 id="9-JQuery中的-是什么含义"><a href="#9-JQuery中的-是什么含义" class="headerlink" title="9.JQuery中的$()是什么含义?"></a>9.JQuery中的$()是什么含义?</h3><h3 id="10-JDBC中Class-forName的作用-为什么要用"><a href="#10-JDBC中Class-forName的作用-为什么要用" class="headerlink" title="10.JDBC中Class.forName的作用?为什么要用?"></a>10.JDBC中Class.forName的作用?为什么要用?</h3><h3 id="11-为什么要使用JDBC-可以直接通过socket和从数据库查数据吗"><a href="#11-为什么要使用JDBC-可以直接通过socket和从数据库查数据吗" class="headerlink" title="11.为什么要使用JDBC?可以直接通过socket和从数据库查数据吗?"></a>11.为什么要使用JDBC?可以直接通过socket和从数据库查数据吗?</h3><h3 id="12-构造器Constructor是否可被override"><a href="#12-构造器Constructor是否可被override" class="headerlink" title="12.构造器Constructor是否可被override?"></a>12.构造器Constructor是否可被override?</h3><h3 id="13-面向对象的特征有哪些"><a href="#13-面向对象的特征有哪些" class="headerlink" title="13.面向对象的特征有哪些?"></a>13.面向对象的特征有哪些?</h3><h3 id="14-String-s-new-String-“xyz”-创建了几个String-对象-两者之间有什么区别"><a href="#14-String-s-new-String-“xyz”-创建了几个String-对象-两者之间有什么区别" class="headerlink" title="14.String s =new  String (“xyz”);创建了几个String 对象?两者之间有什么区别?"></a>14.String s =new  String (“xyz”);创建了几个String 对象?两者之间有什么区别?</h3><h3 id="15-如何把一段逗号分割的字符串转换成一个数组"><a href="#15-如何把一段逗号分割的字符串转换成一个数组" class="headerlink" title="15.如何把一段逗号分割的字符串转换成一个数组?"></a>15.如何把一段逗号分割的字符串转换成一个数组?</h3><h3 id="16-数组有没有length-方法-String有没有length-方法"><a href="#16-数组有没有length-方法-String有没有length-方法" class="headerlink" title="16.数组有没有length()方法?String有没有length()方法?"></a>16.数组有没有length()方法?String有没有length()方法?</h3><h3 id="17-冒泡排除算法"><a href="#17-冒泡排除算法" class="headerlink" title="17.冒泡排除算法?"></a>17.冒泡排除算法?</h3><h3 id="18-描述Java中-amp-和-amp-amp-的区别"><a href="#18-描述Java中-amp-和-amp-amp-的区别" class="headerlink" title="18.描述Java中&amp;和&amp;&amp; 的区别?"></a>18.描述Java中&amp;和&amp;&amp; 的区别?</h3><h3 id="19-char类型-的变量中能不能存储一个中文汉字-为什么"><a href="#19-char类型-的变量中能不能存储一个中文汉字-为什么" class="headerlink" title="19.char类型 的变量中能不能存储一个中文汉字?为什么?"></a>19.char类型 的变量中能不能存储一个中文汉字?为什么?</h3><h3 id="20-使用final关键字修饰一个变量时-是引用不能变-还是引用的对象不能变"><a href="#20-使用final关键字修饰一个变量时-是引用不能变-还是引用的对象不能变" class="headerlink" title="20.使用final关键字修饰一个变量时,是引用不能变,还是引用的对象不能变?"></a>20.使用final关键字修饰一个变量时,是引用不能变,还是引用的对象不能变?</h3><h3 id="21-Integer-和int的区别"><a href="#21-Integer-和int的区别" class="headerlink" title="21.Integer 和int的区别?"></a>21.Integer 和int的区别?</h3><h3 id="22-重载和返回值无关的理解"><a href="#22-重载和返回值无关的理解" class="headerlink" title="22.重载和返回值无关的理解?"></a>22.重载和返回值无关的理解?</h3><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191215194451.png" alt=""></p><p><a href="https://blog.csdn.net/chen_2890/article/details/84954091" target="_blank" rel="noopener">重载链接</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="23-构造方法-非静态代码块-静态代码块的执行顺序"><a href="#23-构造方法-非静态代码块-静态代码块的执行顺序" class="headerlink" title="23.构造方法,非静态代码块,静态代码块的执行顺序?"></a>23.构造方法,非静态代码块,静态代码块的执行顺序?</h3><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191215203222.png" alt=""></p><h3 id="24-数据库调优"><a href="#24-数据库调优" class="headerlink" title="24.数据库调优?"></a>24.数据库调优?</h3><h3 id="25-redis-mongoDB"><a href="#25-redis-mongoDB" class="headerlink" title="25.redis,mongoDB?"></a>25.redis,mongoDB?</h3><h3 id="26-算法"><a href="#26-算法" class="headerlink" title="26.算法?"></a>26.算法?</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaSE&quot;&gt;&lt;a href=&quot;#JavaSE&quot; class=&quot;headerlink&quot; title=&quot;JavaSE&quot;&gt;&lt;/a&gt;&lt;code&gt;JavaSE&lt;/code&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-final-finally-finalize的区别&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
      <category term="Java面试题" scheme="https://xiaoyaoxiaoyao.github.io/tags/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JVM笔记</title>
    <link href="https://xiaoyaoxiaoyao.github.io/2019/12/07/JVM%E7%AC%94%E8%AE%B0/"/>
    <id>https://xiaoyaoxiaoyao.github.io/2019/12/07/JVM%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-07T06:57:58.000Z</published>
    <updated>2019-12-07T07:11:19.930Z</updated>
    
    <content type="html"><![CDATA[<p>栈(Stack): 在函数中定义的一些<code>基本类型的变量</code>和<code>对象的引用变量(变量名)</code>都在函数的栈内存中分配</p><p>堆(Heap): 堆内存用来存放由<code>new创建出来的对象</code>和<code>数组</code></p><p>常量池: </p><p><a href="https://www.cnblogs.com/zzuli/p/9403928.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/zzuli/p/9403928.html" target="_blank" rel="noopener">深入理解JVM内存分配和常量池</a></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;栈(Stack): 在函数中定义的一些&lt;code&gt;基本类型的变量&lt;/code&gt;和&lt;code&gt;对象的引用变量(变量名)&lt;/code&gt;都在函数的栈内存中分配&lt;/p&gt;
&lt;p&gt;堆(Heap): 堆内存用来存放由&lt;code&gt;new创建出来的对象&lt;/code&gt;和&lt;code&gt;数组&lt;/co
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="https://xiaoyaoxiaoyao.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题</title>
    <link href="https://xiaoyaoxiaoyao.github.io/2019/12/07/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://xiaoyaoxiaoyao.github.io/2019/12/07/Java%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2019-12-07T02:06:32.000Z</published>
    <updated>2020-03-31T17:06:11.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Java基础"><a href="#1-Java基础" class="headerlink" title="1.Java基础"></a>1.Java基础</h2><h3 id="1-1简单讲一下java的跨平台的原理"><a href="#1-1简单讲一下java的跨平台的原理" class="headerlink" title="1.1简单讲一下java的跨平台的原理"></a>1.1简单讲一下java的跨平台的原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于各个操作系统(windows,linux等)支持的指令集,不是完全一致的.就会让我们的程序在不同的操作系统上要执行不同程序代码.Java开发了适用于不同操作系统及位数的java虚拟机来屏蔽各个系统之间的差异,提供统一的接口.对于java开发者而言,只需在不同的操作系统上安装对应的不同java虚拟机,这时你的java程序只要遵循java规范,就可以在所有的操作系统上面运行java程序了.</span><br></pre></td></tr></table></figure><p><code>总结</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java通过不同的系统,不同的版本,不同位数的java虚拟机(jvm),来屏蔽不同系统的指令集差异而对外提供统一的接口(java Api),对于我们普通的java开发者而言,只需要按照接口开发即可.如果系统需要部署到不同的环境是,只需要在系统上面按照对应版本的虚拟机即可.</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191207102119.png" alt=""></p><h3 id="1-2讲一下java中的int数据占据几个字节"><a href="#1-2讲一下java中的int数据占据几个字节" class="headerlink" title="1.2讲一下java中的int数据占据几个字节"></a>1.2讲一下java中的int数据占据几个字节</h3><h5 id="java中的基本数据类型"><a href="#java中的基本数据类型" class="headerlink" title="java中的基本数据类型?"></a>java中的基本数据类型?</h5><h5 id="八种"><a href="#八种" class="headerlink" title="八种"></a>八种</h5><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191207102757.png" alt=""></p><h3 id="1-3面向对象的特征有哪些方面"><a href="#1-3面向对象的特征有哪些方面" class="headerlink" title="1.3面向对象的特征有哪些方面?"></a>1.3面向对象的特征有哪些方面?</h3><p>四大基本特征:<code>封装</code> <code>继承</code> <code>多态</code> <code>抽象</code></p><p><code>封装</code>:面向对象的封装性,即将对象封装成一个<code>高度自治和相对封闭</code>的个体,对象状态(属性) 由这个对象自己的行为(方法)来读取和改变.</p><p><code>继承</code>:在定义和实现一个类的时候,可以在一个已经存在的类的基础上来进行,<code>把这个已经存在的类所定义的内容作为自己的内容,并可以加入若干新的内容,或者修改原来的方法使之更适合特殊的需要</code>,这就是继承.<code>遗产继承</code></p><p><code>多态</code>:指的是程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定,而是在程序运行期间才会确定,即一个引用变量 到底会指向哪个类的实例对象,该引用变量发出的方法调用到底是哪个类中实现的方法,必须在由程序运行期间才能决定.</p><p>Object  obj =new xxx();</p><p>UserDao  userDao =new  UserDaoImpl();</p><p>靠的是父类或者接口定义的引用变量可以指向子类或具体实现类的实例对象,而程序调用的方法在<code>运行期</code>才能动态绑定,就是引用变量所指向的具体实例对象的方法,也就是内存里正在运行的那个对象的方法,而不是引用变量的类型中定义的方法.</p><h3 id="1-4有了基本数据类型-为什么还需要包装类型"><a href="#1-4有了基本数据类型-为什么还需要包装类型" class="headerlink" title="1.4有了基本数据类型,为什么还需要包装类型?"></a>1.4有了基本数据类型,为什么还需要包装类型?</h3><p>基本数据类型,java中提供了八种基本的数据类型</p><p>包装类型:每一个基本的数据类型都会一一对应一个包装类型</p><p>boolean –&gt;Boolean</p><p>int –&gt; Integer</p><p>装箱和拆箱:</p><p>装箱: 把基本数据类型转换成对应的包装类型</p><p>Integer.valueOf(1)</p><p>Integer  i =1; 自动装箱,实际上在编译时会调用Integer.valueOf方法来装箱</p><p>int j=i;//自动拆箱  </p><p>int j = i=intValue();//手动拆箱</p><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191207111016.png" alt=""></p><p>java是一个面向对象(OOP)的语言,而基本的数据类型,不具备面向对象的特性.</p><p>而包装类型是可以为null的</p><p>null :  Integer–&gt;null  </p><p>​        int  –&gt;0 </p><p> 用Integer 和int分别表示一个类的id</p><h3 id="1-5”-”和equals方法的区别"><a href="#1-5”-”和equals方法的区别" class="headerlink" title="1.5”==”和equals方法的区别"></a>1.5”==”和equals方法的区别</h3><p>== : 用来判断两个变量之间的值是否相等.变量就可以分为<code>基本数据类型变量</code>和<code>引用类型</code></p><p>如果是基本数据类型的变量直接比较值 而引用类型要比较对应的引用的内存的首地址.</p><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191207141333.png" alt=""></p><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191207144305.jpg" alt=""></p><p><strong>equals()</strong>：用来比较方法两个对象的内容是否相等。<br>注意：equals 方法不能用于基本数据类型的变量，如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的<strong>对象的地址</strong>。</p><p>equals 方法</p><ul><li>Object类(超类)中的equals方法</li></ul><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191207145133.png" alt=""></p><ul><li>String类中对父类的equals方法进行了重写</li></ul><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191207145221.png" alt=""></p><ul><li>从上面可以看出:<ul><li>没有重写的equals方法只是调用了一下==,本质是一样的</li><li>String的equals方法比较的是值,==是比较的变量的值是否相同(<code>基本数据类型</code>: <u>值比较</u>; <code>引用数据类型</code>:<u>引用的对象的内存地址的比较</u>)</li></ul></li></ul><h3 id="1-6讲一下String-和String-Builder-的区别-final-StringBuilder和StringBuffer的区别"><a href="#1-6讲一下String-和String-Builder-的区别-final-StringBuilder和StringBuffer的区别" class="headerlink" title="1.6讲一下String 和String Builder 的区别(final)?StringBuilder和StringBuffer的区别?"></a>1.6讲一下String 和String Builder 的区别(final)?StringBuilder和StringBuffer的区别?</h3><h4 id="1-6-1内容是否可变"><a href="#1-6-1内容是否可变" class="headerlink" title="1.6.1内容是否可变"></a>1.6.1内容是否可变</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在java中提供了三个类String,StringBuffer,StringBuilder 来表示和操作字符串.字符串就是多个字符的集合.</span><br><span class="line">首先要知道String类进过了<span class="keyword">final</span>修饰,所以String类型是内容不可变的字符串,String底层使用了一个不可变的字符数组 (<span class="keyword">final</span> <span class="keyword">char</span>[])</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191207151929.png" alt=""></p><p>String str =new  String(“bbb”);</p><p>而StringBuilder ,StringBuffer,是内容可以改变的字符串.StringBuilder,StringBuffer底层使用的是可变的字符数组(没有使用final修饰)</p><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191207152719.png" alt=""></p><h4 id="1-6-2拼接字符串"><a href="#1-6-2拼接字符串" class="headerlink" title="1.6.2拼接字符串"></a>1.6.2<code>拼接字符串</code></h4><p>String进行拼接String c=”a”+”b”;</p><p>StringBuilder sb=new  StringBuilder();</p><p>sb.append(“a”).append(“c”);</p><p><code>拼接字符串不能使用String进行拼接,要使用StringBuilder或者StringBuffer</code></p><h4 id="1-6-3线程安全"><a href="#1-6-3线程安全" class="headerlink" title="1.6.3线程安全"></a>1.6.3<code>线程安全</code></h4><p><code>StringBuilder</code>是<code>线程不安全</code>的,效率高;而<code>StringBuffer</code>是<code>线程安全</code>的,同时代价就是效率较低</p><h3 id="1-7讲一下java中的集合"><a href="#1-7讲一下java中的集合" class="headerlink" title="1.7讲一下java中的集合?"></a>1.7讲一下java中的集合?</h3><p>java中的集合分为<code>value,key-value</code>(<code>Collection</code>,<code>Map</code>)两种</p><ol><li>存储值又分为 List和Set</li></ol><ul><li>List是有序的,可以重复的</li><li>Set是无序的,不可以重复的.根据equals和hashcode判断,也就是如果一个对象要存储在Set中,必须重写equals和hashcode方法</li></ul><ol start="2"><li>存储key-value的为map</li></ol><h3 id="1-8ArrayList-和LinkedList-的区别"><a href="#1-8ArrayList-和LinkedList-的区别" class="headerlink" title="1.8ArrayList 和LinkedList 的区别?"></a>1.8ArrayList 和LinkedList 的区别?</h3><p>List常用的ArrayList和LinkedList .区别和使用场景?</p><p>ArrayList底层使用的是<code>数组</code>.LinkedList使用的是<code>链表</code></p><p><u>数组查询</u>具有<code>索引查询特定的元素比较快</code>,而<code>插入和删除和修改比较慢</code>(数组在内存中是一块连续的内存,如果插入或删除是需要移动内存).</p><p>链表不要求内存是连续的,在当前元素中存放下一个或者上一个元素的地址.查询时需要从头部开始,一个一个的找.所以<code>查询的效率低</code>.插入时不需要移动内存,只需要改变引用指向即可.所以<code>插入或者删除的效率高</code>.</p><p><code>ArrayList使用在查询比较多,但是插入和删除比较少的情况,而LinkedList使用在查询比较少而插入和删除比较多的情况</code></p><h3 id="1-9将一下HashMap和HashTable的区别"><a href="#1-9将一下HashMap和HashTable的区别" class="headerlink" title="1.9将一下HashMap和HashTable的区别?"></a>1.9将一下HashMap和HashTable的区别?</h3><p>相同点: HashMap和 HashTable都可以用来存储key-value的数据</p><p>区别: </p><ul><li>HashMap是可以把null作为可以或者value的,而hashTable是不可以的</li><li>HashMap是线程不安全的,效率较高.而hashTable是线程安全的,效率较低</li></ul><p>如果想使用线程安全的同时效率高的?</p><p><code>ConcurrentHashMap</code>(concurrent 并行的)</p><h3 id="1-10实现一个拷贝文件的工具类使用字节流还是字符流"><a href="#1-10实现一个拷贝文件的工具类使用字节流还是字符流" class="headerlink" title="1.10实现一个拷贝文件的工具类使用字节流还是字符流?"></a>1.10实现一个拷贝文件的工具类使用字节流还是字符流?</h3><p>我们拷贝的文件不确定是只包含字符流，有可以能有字节流(图片、声音、图像等)，为考虑到通用性，要使用字节流。</p><h2 id="2-Java面试题"><a href="#2-Java面试题" class="headerlink" title="2.Java面试题"></a>2.Java面试题</h2><h2 id="先自我介绍"><a href="#先自我介绍" class="headerlink" title="先自我介绍"></a>先自我介绍</h2><h2 id="在公司中做什么"><a href="#在公司中做什么" class="headerlink" title="在公司中做什么"></a>在公司中做什么</h2><h2 id="说说你对SpringMVC的了解"><a href="#说说你对SpringMVC的了解" class="headerlink" title="说说你对SpringMVC的了解"></a>说说你对SpringMVC的了解</h2><blockquote><p>就是一个能够==接收前端的请求==,通过==前端控制器DispatcherServlet进行分发==,给==相应的Controller去处理相应的请求==,同时==将response响应给前端==的一个web框架.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</span><br></pre></td></tr></table></figure><h2 id="说说你对Spring的了解"><a href="#说说你对Spring的了解" class="headerlink" title="说说你对Spring的了解"></a>说说你对Spring的了解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.spring的工作原理</span><br><span class="line"></span><br><span class="line">2.spring的核心技术</span><br><span class="line"></span><br><span class="line">3.spring的优缺点</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.spring的工作原理</span><br><span class="line">spring 是按照设计模式精心打造的，它实现了工厂模式的工厂类，这个类名为BeanFactory（接口），在程序中通常使用它的子类ApplicationContext(也是接口)。</span><br><span class="line"></span><br><span class="line">spring的核心是IOC(反转控制)容器，</span><br><span class="line">(</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> AdminService adminService;</span><br><span class="line">)</span><br><span class="line">    </span><br><span class="line">    IOC也是一种编程思想，用于实现模块之间的解耦，在Spring中它的作用是对对象的创建，维护和销毁等生命周期的控制。IOC:把对象的创建、初始化、销毁交给spring来管理，而不是由开发者控制，实现控制反转。</span><br><span class="line"></span><br><span class="line">spring是一个大的工厂类，spring的特点就是基于配置，在其配置文件中通过&lt;bean&gt;元素来创建实例对象。</span><br><span class="line"></span><br><span class="line">根据业务逻辑来看，对象经常不是独立的，一个对象的创建往往涉及另一个对象的创建，当然这个对象也要由IOC容器负责，负责的方式就是依赖注入DI,通过反射机制实现。有三种注入方式：（<span class="number">1</span>）接口注入（<span class="number">2</span>）构造器注入（<span class="number">3</span>）Setter方法注入。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.spring的核心技术</span><br><span class="line">spring的核心技术有：IOC,AOP</span><br><span class="line"></span><br><span class="line">java 的 高级特性：反射机制，代理</span><br><span class="line"></span><br><span class="line">AOP:面向切面编程，系统中有很多各不相干的类的方法，在这众多方法中加入某种系统功能的代码，如加入日志，权限判断等，AOP可以实现横切关注点（如日志，安全，缓存和事务管理）与他们所影响的对象之间的解耦。</span><br><span class="line"></span><br><span class="line">实现AOP 功能采用的是代理技术，调用代理类，代理类与目标类具有相同的方法声明。</span><br><span class="line"></span><br><span class="line">AOP 在spring中主要表现在两个方面：提供声明式的事务管理   、spring支持用户自定义切面。</span><br><span class="line"></span><br><span class="line">spring AOP的使用在另外一位同学的博客中可以看到，我不喜欢造轮子就直接给大家贴一个路径吧</span><br><span class="line">https:<span class="comment">//www.cnblogs.com/flowwind/p/4782606.html</span></span><br><span class="line"></span><br><span class="line">AOP主要包括通知（Advice）切点（PointCut）连接点（JoinPoint）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.spring 的优缺点</span><br><span class="line">Spring 的核心概念是IOC和AOP,这两个核心服务的对象算是bean(POJO),定位是一个轻量级的框架，但是随着他的发展变得很庞大，我们称它为spring 全家桶。</span><br><span class="line"></span><br><span class="line">它具备以下优点：</span><br><span class="line">spring中避免了关键字<span class="keyword">new</span>造成的耦合问题。</span><br><span class="line"></span><br><span class="line">spring本身就是一个工厂，不需要再编写工厂类了。</span><br><span class="line"></span><br><span class="line">spring不需要进行明确的引用关系的传递，直接通过配置完成</span><br><span class="line"></span><br><span class="line">所有框架几乎都可以在spring中整合在一起使用。</span><br><span class="line"></span><br><span class="line">spring编程=factory设计模式+proxy设计模式</span><br><span class="line"></span><br><span class="line">当然，它的缺点也是不少的：</span><br><span class="line">spring基于大量的xml 配置文件，使得我们花了大量的时间放在配置上，拖慢了开发的进度，springboot 问世后，提倡代码优于配置解决了这个问题。</span><br><span class="line"></span><br><span class="line">spring 的内容太庞大，随便打断点查看的时候会出现十几二十层代码，阅览性不强，在实际开发的过程中spring的角色更像是胶水一样，充当整合各种技术的角色，同时作为bean的容器。</span><br></pre></td></tr></table></figure><h2 id="说说你对Mybatis的了解，还用过其它ORM框架吗？"><a href="#说说你对Mybatis的了解，还用过其它ORM框架吗？" class="headerlink" title="说说你对Mybatis的了解，还用过其它ORM框架吗？"></a>说说你对Mybatis的了解，还用过其它ORM框架吗？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORM（Object-Relationship-Mapping）：是对象关系映射的意思，它是一种思想，是指将数据库中的每一行数据用对象的形式表现出来。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyBatis概念</span><br><span class="line">MyBatis是一个实现了JPA规范的用来连接数据库并对其进行增删改查操作的开源框架 （就和传统的JDBC一样，就是个连接数据库的东西），其实，它底层就是一个JDBC封装的组件。MyBatis的前身是Ibatis，Ibatis创建与<span class="number">2002</span>年最初为Apache下面的一个开源项目，<span class="number">2010</span>迁移到google code下面并改名为MyBatis。</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/hellozpc/article/details/80878563?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">链接</a></p><h2 id="Redis-和-MongoDB-的区别，在哪里使用过此框架。"><a href="#Redis-和-MongoDB-的区别，在哪里使用过此框架。" class="headerlink" title="Redis 和 MongoDB 的区别，在哪里使用过此框架。"></a>Redis 和 MongoDB 的区别，在哪里使用过此框架。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nosql和关系型数据库的区别：</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line">1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用Oracle那样花费大量成本购买使用，相比关系型数据库价格便宜</span><br><span class="line">2）查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库</span><br><span class="line">3）存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而关系型数据库则只支持基础类型</span><br><span class="line">4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">1）不提供关系型数据库对事务的处理</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">就Redis和MongoDB来说，大家一般称之为Redis缓存、MongoDB数据库。这也是有道有理有根据的，</span><br><span class="line"></span><br><span class="line">Redis主要把数据存储在内存中，其“缓存”的性质远大于其“数据存储“的性质，其中数据的增删改查也只是像变量操作一样简单；</span><br><span class="line"></span><br><span class="line">MongoDB却是一个“存储数据”的系统，增删改查可以添加很多条件，就像SQL数据库一样灵活，这一点在面试的时候很受用。</span><br></pre></td></tr></table></figure><h1 id="项目中遇到的问题，用到了哪些JavaEE知识点。"><a href="#项目中遇到的问题，用到了哪些JavaEE知识点。" class="headerlink" title="项目中遇到的问题，用到了哪些JavaEE知识点。"></a>项目中遇到的问题，用到了哪些JavaEE知识点。</h1><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="说一说对多态的理解？"><a href="#说一说对多态的理解？" class="headerlink" title="说一说对多态的理解？"></a>说一说对多态的理解？</h2><p>面试常客。对Java的封装、继承、 多态需要进行相关的整理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">封装就是把对象的属性和操作（或服务）结合为一个独立的整体，并尽可能隐藏对象的内部实现细节。</span><br><span class="line">    使用private修饰符，表示最小的访问权限。</span><br><span class="line">    对成员变量的访问，统一提供setXXX，getXXX方法。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。当然，如果在父类中拥有私有属性(private修饰)，则子类是不能被继承的。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">继承：就是子类继承父类的属性和行为，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接</span><br><span class="line">访问父类中的非私有的属性和行为</span><br><span class="line"></span><br><span class="line">好处:</span><br><span class="line">1. 提高代码的复用性。</span><br><span class="line">2. 类与类之间产生了关系，是多态的前提。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">多态： 是指同一行为，具有多个不同表现形式。</span><br><span class="line"></span><br><span class="line">前提【重点】  </span><br><span class="line">1. 继承或者实现【二选一】</span><br><span class="line">2. 方法的重写【意义体现：不重写，无意义】</span><br><span class="line">3. 父类引用指向子类对象【格式体现】</span><br><span class="line"></span><br><span class="line">编译看左边,运行看右边</span><br></pre></td></tr></table></figure><h2 id="说一说SSM框架？"><a href="#说一说SSM框架？" class="headerlink" title="说一说SSM框架？"></a>说一说SSM框架？</h2><h2 id="对我们公司的了解？"><a href="#对我们公司的了解？" class="headerlink" title="对我们公司的了解？"></a>对我们公司的了解？</h2><h2 id="jvm什么时候触发gc"><a href="#jvm什么时候触发gc" class="headerlink" title="jvm什么时候触发gc"></a>jvm什么时候触发gc</h2><h2 id="sychronized和Lock"><a href="#sychronized和Lock" class="headerlink" title="sychronized和Lock?"></a>sychronized和Lock?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">总结来说，Lock和synchronized有以下几点不同：</span><br><span class="line"></span><br><span class="line">　　1）Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现；</span><br><span class="line"></span><br><span class="line">　　2）synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；</span><br><span class="line"></span><br><span class="line">　　3）Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；</span><br><span class="line"></span><br><span class="line">　　4）通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。</span><br><span class="line"></span><br><span class="line">　　5）Lock可以提高多个线程进行读操作的效率。</span><br><span class="line"></span><br><span class="line">　　在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">反射简单来说，就是动态加载对象，并对对象进行剖析。在Java中的反射机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">反射的应用场景</span><br><span class="line">反射最大的应用就是框架</span><br><span class="line"></span><br><span class="line">Spring ioc</span><br><span class="line"></span><br><span class="line">框架</span><br><span class="line"></span><br><span class="line">spring的ioc/di也是反射…</span><br><span class="line">JDBC的classForName()也是反射……</span><br></pre></td></tr></table></figure><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="海量数据"><a href="#海量数据" class="headerlink" title="海量数据"></a>海量数据</h2><p>mongodb</p><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p>表中的每一个字段都是不可分割的列  </p><h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p>在第一范式的基础上,其他属性完全依赖于主键</p><h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p>在第二范式的基础上,其他属性之间要消除依赖传递</p><p>譬如说:  A依赖于B，B依赖于C，就可以说A依赖C   学号–&gt;学生名字   </p><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20200107151524.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这张表中有如下决定关系： 学号–&gt;姓名，性别，系号–&gt;决定系名，宿舍号–&gt;决定宿舍电话，也有 学号–&gt;系名，学号–&gt;宿舍电话。</span><br><span class="line"></span><br><span class="line">在这样一张表中则存在着传递依赖。也就是系名依赖系号，系号依赖学号，那么间接的系名依赖学号，宿舍号、宿舍电话和学号之间也有同样的关系。这样设计表的同样会带来数据冗余，操作异常等问题。那么我们同样可以用关系分解的分解的方法来消除传递依赖，将这张表分成三张表：</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20200107151657.png" alt=""></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个索引是存储的表中一个特定列的值数据结构（最常见的是B-Tree）。索引是在表的列上创建。所以，要记住的关键点是索引包含一个表中列的值，并且这些值存储在一个数据结构中。请记住记住这一点：索引是一种数据结构</span><br></pre></td></tr></table></figure><h3 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a>索引的缺点</h3><p>① 创建索引和维护索引需要时间成本，这个成本随着数据量的增加而加大</p><p>② 创建索引和维护索引需要空间成本，每一条索引都要占据数据库的物理存储空间，数据量越大，占用空间也越大（数据表占据的是数据库的数据空间）</p><p>③ 会降低表的增删改的效率，因为每次增删改索引需要进行动态维护，导致时间变长</p><h2 id="用复合主键还是主键查询？"><a href="#用复合主键还是主键查询？" class="headerlink" title="用复合主键还是主键查询？"></a>用复合主键还是主键查询？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复合主键：数据库表的主键由两个及以上的字段组成。</span><br></pre></td></tr></table></figure><p>这个主键的确定是要根据该主键能否唯一标识一行数据,来确定的</p><p>譬如: 学号和选科编号–&gt;确定了该课程的成绩</p><h2 id="数据库的常用约束"><a href="#数据库的常用约束" class="headerlink" title="数据库的常用约束"></a>数据库的常用约束</h2><p>1.非空约束  not null</p><p>2.唯一约束   unique</p><p>3.主键约束  primary key</p><p>4.外键约束  foreign  key</p><h2 id="数据库常用函数"><a href="#数据库常用函数" class="headerlink" title="数据库常用函数"></a>数据库常用函数</h2><p>count(*),max(num),min(num)</p><h2 id="count-1-和-count-的区别"><a href="#count-1-和-count-的区别" class="headerlink" title="count(1) 和 count(*)的区别"></a>count(1) 和 count(*)的区别</h2><p>count(1)表示的是查询表中的第一个字段,count(*)表示的是查询表中的一行中的所有字段</p><p>count(*)（是针对全表）将返回表格中所有存在的行的总数包括值为null的行；</p><p>count(列名)（是针对某一列）将返回表格中某一列除去null以外的所有行的总数</p><p>当某<a href="https://www.baidu.com/s?wd=%E5%AD%97%E6%AE%B5%E5%90%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">字段名</a>下边的数据有<a href="https://www.baidu.com/s?wd=null%E5%80%BC&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">null值</a>的时候，不计入这个count(1)中，*则全部列入count中</p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h3 id="1-交叉连接查询-有错误数据-基本不用"><a href="#1-交叉连接查询-有错误数据-基本不用" class="headerlink" title="1.交叉连接查询(有错误数据, 基本不用)"></a>1.交叉连接查询(有错误数据, 基本不用)</h3><blockquote><p>select * from 表A , 表B ; (笛卡尔积) 得到的是两个表的乘积</p></blockquote><h3 id="2-外连接查询-在交叉连接的基础上-外连接只能取得其中一方存在的数据，外连接又分为左连接和右连接两种情况"><a href="#2-外连接查询-在交叉连接的基础上-外连接只能取得其中一方存在的数据，外连接又分为左连接和右连接两种情况" class="headerlink" title="2.外连接查询: 在交叉连接的基础上 ,外连接只能取得其中一方存在的数据，外连接又分为左连接和右连接两种情况"></a>2.外连接查询: 在交叉连接的基础上 ,外连接只能取得其中一方存在的数据，外连接又分为左连接和右连接两种情况</h3><blockquote><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接:"></a>左外连接:</h3><p>​    SELECT 列名1 FROM 表1 LEFT OUTER JOIN 表2 ON 表1.外键=表2.主键 WhERE 条件语句;</p><p>​         select * from 表A left [ outer ] join 表B on 条件.<br>​         以左边表为主, 左边有数据, 右边没有使用null代替.<br>​         左边没有的数据 , 右边也不能出现.</p><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接:"></a>右外连接:</h3><p>​    SELECT 列名1 FROM 表1 RIGHT OUTER JOIN 表2 ON 表1.外键=表2.主键 WhERE 条件语句;</p><p>​         select * from 表A right [ outer ] join 表B on 条件;<br>​         以右边表为主 .</p></blockquote><h3 id="3-内连接查询-在交叉连接的基础上-内连接就是表间的主键与外键相连，只取得键值一致的，可以获取双方表中的数据连接方式"><a href="#3-内连接查询-在交叉连接的基础上-内连接就是表间的主键与外键相连，只取得键值一致的，可以获取双方表中的数据连接方式" class="headerlink" title="3.内连接查询: 在交叉连接的基础上 , 内连接就是表间的主键与外键相连，只取得键值一致的，可以获取双方表中的数据连接方式."></a>3.内连接查询: 在交叉连接的基础上 , 内连接就是表间的主键与外键相连，只取得键值一致的，可以获取双方表中的数据连接方式.</h3><blockquote><p>隐式内连接:<br>    select * rom 表A , 表B where A.外键 = B . 主键..<br>显示外连接:</p><p>​    SELECT 列名1,列名2… FROM 表1 INNER JOIN 表2 ON 表1.外键=表2.主键 WhERE 条件语句;             select * from 表A [inner] join 表B on A.外键 = B.主键<br>​         on后面可以继续使用where条件查询.</p></blockquote><h4 id="左链接查询-见上"><a href="#左链接查询-见上" class="headerlink" title="左链接查询:见上"></a>左链接查询:见上</h4><h4 id="右链接查询-见上"><a href="#右链接查询-见上" class="headerlink" title="右链接查询:见上"></a>右链接查询:见上</h4><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><blockquote><p>union 联合 合并：将多条查询语句的结果合并成一个结果</p></blockquote><p>union和union all的区别是，union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复</p><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><h3 id="删除表数据"><a href="#删除表数据" class="headerlink" title="删除表数据"></a>删除表数据</h3><p>delete  from  table  where  id =’1’</p><p>增删改查:</p><p>增: insert  into table  (字段名,字段名)  values (?,?)</p><p>删: delete from table where id =’1’</p><p>改: update table  set  name =’小明’</p><p>查: select  *  from table </p><h3 id="清空表后id是否重置"><a href="#清空表后id是否重置" class="headerlink" title="清空表后id是否重置"></a>清空表后id是否重置</h3><p>否</p><h3 id="分页查询语句-偏移量"><a href="#分页查询语句-偏移量" class="headerlink" title="分页查询语句(偏移量)"></a>分页查询语句(偏移量)</h3><p>select   * from table  limit 0,5  order by  id asc   </p><p>根据id升序查询表中的从索引为0的记录开始查询,查询五条数据  </p><h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><p>在项目中分为登录认证,权限认证</p><p>登录认证的流程:</p><blockquote><p>1.注册securityManager    安全管理中心</p><p>2.Security.login()    当前的主体(用户)提交登陆认证</p><p>3.SecurityManager.login()  安全管理中心执行认证</p><p>4.authenticator    认证器执行认证</p><p>5.realm : 根据身份获取验证信息</p></blockquote><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20200107211910.png" alt=""></p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h3 id="SpringMVC注解"><a href="#SpringMVC注解" class="headerlink" title="SpringMVC注解"></a>SpringMVC注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"></span><br><span class="line">在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用<span class="meta">@Controller</span> 标记一个类是Controller ，然后使用<span class="meta">@RequestMapping</span> 等一些注解用以定义请求URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。其标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用<span class="meta">@RequestMapping</span> 注解。<span class="meta">@Controller</span> 只是定义了一个控制器类，而使用<span class="meta">@RequestMapping</span> 注解的方法才是真正处理请求的处理器。此外我们还需要将controller注册到spring里。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping</span><br><span class="line"></span><br><span class="line">RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径，作用于方法上，表明该处理器的请求地址=父路径+方法上url</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@requestParam</span><br><span class="line"></span><br><span class="line">@requestParam主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(&quot;name&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@RequestBody</span><br><span class="line"></span><br><span class="line">该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；它是通过使用HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的</span><br></pre></td></tr></table></figure><h1 id="举例AOP"><a href="#举例AOP" class="headerlink" title="举例AOP"></a>举例AOP</h1><p>就是代理模式</p><p>事务管理</p><h2 id="AOP-有什么通知"><a href="#AOP-有什么通知" class="headerlink" title="AOP 有什么通知"></a>AOP 有什么通知</h2><p>前置通知</p><p>后置通知</p><p>环绕通知</p><p>异常通知</p><p>最终通知</p><h1 id="Maven命令行使用"><a href="#Maven命令行使用" class="headerlink" title="Maven命令行使用"></a>Maven命令行使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Maven是一种构建工具（打包项目）、依赖管理工具（资源依赖管理工具：主要用于集成资源）、项目信息聚合工具</span><br></pre></td></tr></table></figure><h1 id="jQuery-获取id"><a href="#jQuery-获取id" class="headerlink" title="jQuery 获取id"></a>jQuery 获取id</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = $(找到这个div).attr(<span class="string">'id'</span>);</span><br></pre></td></tr></table></figure><h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><h2 id="Java-基础-List-和-Set"><a href="#Java-基础-List-和-Set" class="headerlink" title="Java 基础 List 和 Set"></a>Java 基础 List 和 Set</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list和set都是单列集合collection的子接口;list中的方法可以允许重复的对象,set方法不允许重复的对象;list是有序的(存储和读取的顺序一致),set是无序的,list允许存储多个null,set只允许存储一个null;list中有关于索引的方法</span><br></pre></td></tr></table></figure><h2 id="Java集合排序-ArrayList-遍历"><a href="#Java集合排序-ArrayList-遍历" class="headerlink" title="Java集合排序  ArrayList 遍历"></a>Java集合排序  ArrayList 遍历</h2><blockquote><p>Java集合排序</p></blockquote><p>实现Comparable接口和Comparator接口</p><blockquote><p>ArrayList 遍历</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">arrayList.add(<span class="string">"123"</span>);</span><br><span class="line">arrayList.add(<span class="string">"123"</span>);</span><br><span class="line">arrayList.add(<span class="string">"123"</span>);</span><br><span class="line">arrayList.add(<span class="string">"123"</span>);</span><br><span class="line">arrayList.add(<span class="string">"123"</span>);</span><br><span class="line"><span class="comment">//1.foreach 增强for 数组和集合的遍历</span></span><br><span class="line"><span class="keyword">for</span> (Object o : arrayList) &#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"================================="</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.迭代器遍历</span></span><br><span class="line">Iterator iterator = arrayList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"================================="</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.for循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.size(); i++) &#123;</span><br><span class="line">    System.out.println(arrayList.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除集合中的元素"><a href="#删除集合中的元素" class="headerlink" title="删除集合中的元素"></a>删除集合中的元素</h2><p>remove()</p><h2 id="ArrayList-去重"><a href="#ArrayList-去重" class="headerlink" title="ArrayList 去重"></a>ArrayList 去重</h2><p>通过将list集合放入set集合中,利用set集合的元素不能重复的性质 (无序)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">      arrayList.add(<span class="string">"123"</span>);</span><br><span class="line">      arrayList.add(<span class="string">"123"</span>);</span><br><span class="line">      arrayList.add(<span class="string">"123"</span>);</span><br><span class="line">      arrayList.add(<span class="string">"123"</span>);</span><br><span class="line">      arrayList.add(<span class="string">"123"</span>);</span><br><span class="line">      arrayList.add(<span class="string">"321"</span>);</span><br><span class="line">      Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(arrayList);</span><br><span class="line">      <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">          System.out.println(s);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="Java-hashcode-和-equals-区别"><a href="#Java-hashcode-和-equals-区别" class="headerlink" title="Java hashcode 和 equals 区别"></a>Java hashcode 和 equals 区别</h2><blockquote><p>equals源码 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object anObject) &#123;</span><br><span class="line">    if (this == anObject) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (anObject instanceof String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        int n = value.length;</span><br><span class="line">        if (n == anotherString.value.length) &#123;</span><br><span class="line">            char v1[] = value;</span><br><span class="line">            char v2[] = anotherString.value;</span><br><span class="line">            int i = 0;</span><br><span class="line">            while (n-- != 0) &#123;</span><br><span class="line">                if (v1[i] != v2[i])</span><br><span class="line">                    return false;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>hashcode源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>为什么重写equals时必须重写hashCode方法?</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。</span><br><span class="line"></span><br><span class="line">equals它的作用也是判断两个对象是否相等，如果对象重写了equals()方法，比较两个对象的内容是否相等；如果没有重写，比较两个对象的地址是否相同，价于“==”。同样的，equals()定义在JDK的Object.java中，这就意味着Java中的任何类都包含有equals()函数。</span><br></pre></td></tr></table></figure><h2 id="HashMap-是不是有序的"><a href="#HashMap-是不是有序的" class="headerlink" title="HashMap 是不是有序的"></a>HashMap 是不是有序的</h2><p>无序的</p><h2 id="有没有有序的Map实现类"><a href="#有没有有序的Map实现类" class="headerlink" title="有没有有序的Map实现类"></a>有没有有序的Map实现类</h2><p>TreeMap 和 LinkedHashmap</p><p>TreeMap默认是key升序，LinkedHashmap默认是数据插入顺序</p><blockquote><p>hash是无序的,tree和linkedHash是有序的</p></blockquote><h2 id="TreeMap-和-LinkedHashmap如何保证有顺序的"><a href="#TreeMap-和-LinkedHashmap如何保证有顺序的" class="headerlink" title="TreeMap 和 LinkedHashmap如何保证有顺序的"></a>TreeMap 和 LinkedHashmap如何保证有顺序的</h2><p>TreeMap是基于比较器Comparator来实现有序的。</p><p>LinkedHashMap是基于链表来实现数据插入有序的。</p><h2 id="哪个有序的实现比较好？"><a href="#哪个有序的实现比较好？" class="headerlink" title="哪个有序的实现比较好？"></a>哪个有序的实现比较好？</h2><p>看使用场景，如果需要对Map中存储的对象进行比较，那么使用TreeMap，如果只是要求数据插入有顺序，使用LinkedHashMap</p><h2 id="有没有更好的实现方式？"><a href="#有没有更好的实现方式？" class="headerlink" title="有没有更好的实现方式？"></a>有没有更好的实现方式？</h2><h2 id="HahsMap是线程安全的吗？"><a href="#HahsMap是线程安全的吗？" class="headerlink" title="HahsMap是线程安全的吗？"></a>HahsMap是线程安全的吗？</h2><p>HashMap是多线程的,不安全的,速度快;</p><p>hashTable是单线程的,是安全的,速度慢</p><h2 id="在并发下使用哪个Map类"><a href="#在并发下使用哪个Map类" class="headerlink" title="在并发下使用哪个Map类"></a>在并发下使用哪个Map类</h2><h2 id="哈希表的实现"><a href="#哈希表的实现" class="headerlink" title="哈希表的实现"></a>哈希表的实现</h2><p>数组和链表/红黑树的数据结构</p><h2 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h2><p>所谓哈希（hash），就是将不同的输入映射成独一无二的、固定长度的值（又称”哈希值”）。它是最常见的软件运算之一。</p><p>如果不同的输入得到了同一个哈希值，就发生了”哈希碰撞”（collision）。</p><p><a href="http://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html</a></p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="Java中的常见异常"><a href="#Java中的常见异常" class="headerlink" title="Java中的常见异常"></a>Java中的常见异常</h2><p>数组越界异常,空指针异常,类型转换异常,堆内存溢出</p><h2 id="项目中处理异常"><a href="#项目中处理异常" class="headerlink" title="项目中处理异常"></a>项目中处理异常</h2><p>在springboot通过定义全局异常处理器,对异常进行全局处理</p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="实现线程的方式？"><a href="#实现线程的方式？" class="headerlink" title="实现线程的方式？"></a>实现线程的方式？</h2><blockquote><p>1.继承Thread类</p><p>2.实现Runnable接口</p></blockquote><h2 id="实现多线程方式的区别？"><a href="#实现多线程方式的区别？" class="headerlink" title="实现多线程方式的区别？"></a>实现多线程方式的区别？</h2><p>继承和实现</p><p>单继承,多实现</p><h2 id="如果想实现多个线程一起等待某个事件发生后执行"><a href="#如果想实现多个线程一起等待某个事件发生后执行" class="headerlink" title="如果想实现多个线程一起等待某个事件发生后执行"></a>如果想实现多个线程一起等待某个事件发生后执行</h2><p>sleep()</p><h2 id="多线程-实现生产者-消费者模式"><a href="#多线程-实现生产者-消费者模式" class="headerlink" title="多线程    实现生产者 / 消费者模式"></a>多线程    实现生产者 / 消费者模式</h2><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><h3 id="SpringMVC是线程安全的吗？"><a href="#SpringMVC是线程安全的吗？" class="headerlink" title="SpringMVC是线程安全的吗？"></a>SpringMVC是线程安全的吗？</h3><p>是安全的,Springmvc默认是单例模式</p><h3 id="如何处理线程安全问题？"><a href="#如何处理线程安全问题？" class="headerlink" title="如何处理线程安全问题？"></a>如何处理线程安全问题？</h3><p>同步代码块,同步方法,加锁</p><h1 id="IO-NIO"><a href="#IO-NIO" class="headerlink" title="IO  NIO"></a>IO  NIO</h1><p>当我们学习了Java NIO和IO后，我们很快就会思考一个问题：</p><p>什么时候应该使用IO，什么时候我应该使用NIO</p><p>在下文中我会尝试用例子阐述java NIO 和IO的区别，以及它们对你的设计会有什么影响</p><p>Java NIO和IO的主要区别</p><table><thead><tr><th>IO</th><th>NIO</th></tr></thead><tbody><tr><td>面向Stream</td><td>面向Buffer</td></tr><tr><td>阻塞IO</td><td>非阻塞IO</td></tr><tr><td>无</td><td>选择器</td></tr></tbody></table><p><strong>1、面向流与面向缓冲</strong></p><p>​     Java IO和NIO之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。 Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。 Java NIO的缓冲导向方法略有不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。</p><p><strong>2、阻塞与非阻塞IO</strong></p><p>​     Java IO的各种流是阻塞的。这意味着，当一个线程调用read() 或 write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。</p><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><h2 id="如何理解分布式？"><a href="#如何理解分布式？" class="headerlink" title="如何理解分布式？"></a>如何理解分布式？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">狭义的分布是指，指多台PC在地理位置上分布在不同的地方。</span><br><span class="line"></span><br><span class="line">1.分布式系统</span><br><span class="line"></span><br><span class="line"> 分布式系统：多个能独立运行的计算机（称为结点）组成。各个结点利用计算机网络进行信息传递，从而实现共同的“目标或者任务”。</span><br><span class="line"></span><br><span class="line">2.分布式程序：运行在分布式系统上的计算机程序。</span><br><span class="line"></span><br><span class="line">3.分布式计算：利用分布式系统来解决计算问题。在分布式计算里，一个问题被细化成多个任务，每个任务可以被一个或者多个计算机来完成</span><br></pre></td></tr></table></figure><p><strong>如何理解 ： 专业的事情 交给专业的人去做 尽量降低 耦合度（就是说 每个模块 是不受影响的 ）</strong></p><p><strong>一个模块你只做一件小事情</strong></p><h2 id="如何理解微服务？"><a href="#如何理解微服务？" class="headerlink" title="如何理解微服务？"></a>如何理解微服务？</h2><p><strong>微服务化的核心就是将传统的一站式应用,根据业务拆分成一个一个的服务,彻底地去耦合,</strong></p><p>​     <strong>每一个微服务提供单个业务功能的服务,一个服务做一件事,</strong></p><p>​     <strong>从技术角度看就是一种小而独立的处理过程,类似进程概念,能够自行单独启动或销毁</strong> </p><p>​     <strong>拥有自己独立的数据库</strong></p><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>我平常在项目中是通过idea来创建springboot项目的,首先选择所需要的依赖,然后在配置Mybatis中的数据库的数据源信息,最后通过入口函数启动springboot项目</p><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><p>@Repository用于标注数据访问组件，</p><p>@Service用于标注业务层组件，</p><p>@Component用于泛指组件，</p><p>@ComponentScan用于组件扫描</p><p>@Configuration：注解在类上，表示这是一个IOC容器，相当于spring的配置文件，java配置的方式。 IOC容器的配置类一般与 @Bean 注解配合使用，用 @Configuration 注解类等价与 XML 中配置 beans，用@Bean 注解方法等价于 XML 中配置 bean</p><p>@Bean： 注解在方法上，声明当前方法返回一个Bean</p><p>@SpringBootApplication：@SpringBootApplication=@ComponentScan+@Configuration+@EnableAutoConfiguration：约定优于配置</p><h2 id="MyBatis-ORM-对象关系"><a href="#MyBatis-ORM-对象关系" class="headerlink" title="MyBatis(ORM)对象关系"></a>MyBatis(ORM)对象关系</h2><h3 id="如何配置扫描（POJO、Mapper）"><a href="#如何配置扫描（POJO、Mapper）" class="headerlink" title="如何配置扫描（POJO、Mapper）"></a>如何配置扫描（POJO、Mapper）</h3><p>@Configuration配置类使用@MapperScan或者@MapperScans注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.xiaoyao.springbootcrud.mapper"</span>)</span><br></pre></td></tr></table></figure><h3 id="取值方式，以及取值的区别"><a href="#取值方式，以及取值的区别" class="headerlink" title="取值方式，以及取值的区别"></a>取值方式，以及取值的区别</h3><p>#{ }和${ }:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：order by #user_id#，如果传入的值是111,那么解析成sql时的值为order by &quot;111&quot;, 如果传入的值是id，则解析成的sql为order by &quot;id&quot;.</span><br><span class="line"></span><br><span class="line">2.$将传入的数据直接显示生成在sql中。如：orderby将传入的数据直接显示生成在sql中。如：orderbyuser_id$，如果传入的值是111,那么解析成sql时的值为order by user_id, 如果传入的值是id，则解析成的sql为order by id.</span><br><span class="line"></span><br><span class="line">3.#方式能够很大程度防止sql注入。</span><br><span class="line"></span><br><span class="line">4.$方式无法防止Sql注入。</span><br><span class="line"></span><br><span class="line">5.$方式一般用于传入数据库对象，例如传入表名.</span><br><span class="line">　　</span><br><span class="line">6.一般能用#的就别用$.</span><br><span class="line"></span><br><span class="line">MyBatis排序时使用order by 动态参数时需要注意，用$而不是#</span><br></pre></td></tr></table></figure><h3 id="一对一映射"><a href="#一对一映射" class="headerlink" title="一对一映射"></a>一对一映射</h3><h4 id="一对一关联表中的查询"><a href="#一对一关联表中的查询" class="headerlink" title="一对一关联表中的查询"></a>一对一关联表中的查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需求:查询订单信息关联查询用户信息</span><br></pre></td></tr></table></figure><h5 id="Sql语句"><a href="#Sql语句" class="headerlink" title="Sql语句:"></a>Sql语句:</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查询语句：</span><br><span class="line">先确定主查询表：订单信息表</span><br><span class="line">再确定关联查询表：用户信息</span><br><span class="line">通过orders关联查询用户使用user_id一个外键，只能关联查询出一条用户记录就可以使用内连接</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> orders.*,user.username,user.sex <span class="keyword">FROM</span> orders,<span class="keyword">USER</span> <span class="keyword">WHERE</span> orders.user_id = user.id</span><br></pre></td></tr></table></figure><h4 id="使用resultType实现"><a href="#使用resultType实现" class="headerlink" title="使用resultType实现"></a>使用resultType实现</h4><ol><li><p>创建PO类:</p></li><li><p>一对一查询映射的POJO</p><p>创建pojo包括 订单信息和用户信息，resultType才可以完成映射。<br>创建OrderCustom作为自定义pojo(订单扩展对象,用于订单和用户的查询结果映射)，继承sql查询列多的po类。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderCustom</span> <span class="keyword">extends</span> <span class="title">Orders</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;<span class="comment">//补充用户信息</span></span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><u>Mapper.xml</u></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrderUserList"</span> <span class="attr">resultType</span>=<span class="string">"orderCustom"</span>&gt;</span></span><br><span class="line">SELECT orders.*,user.username,user.sex FROM orders,USER WHERE orders.user_id = user.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><u>Mapper.java</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapperCustom</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;OrderCustom&gt; <span class="title">findOrderUserList</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用resultMap实现"><a href="#使用resultMap实现" class="headerlink" title="使用resultMap实现"></a>使用resultMap实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resultMap提供一对一关联查询的映射和一对多关联查询映射，</span><br><span class="line">一对一映射思路：将关联查询的信息映射到pojo中，如下：</span><br><span class="line">在Orders类中创建一个User属性，将关联查询的信息映射到User属性中</span><br></pre></td></tr></table></figure><h4 id="一对一中的主表中的POJO类"><a href="#一对一中的主表中的POJO类" class="headerlink" title="一对一中的主表中的POJO类:"></a>一对一中的主表中的POJO类:</h4><p><strong>查询订单关联查询用户信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xiaoyao.mybatis.model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> userId;</span><br><span class="line">  <span class="keyword">private</span> String number;</span><br><span class="line">  <span class="keyword">private</span> java.sql.Timestamp createtime;</span><br><span class="line">  <span class="keyword">private</span> String note;</span><br><span class="line">  <span class="comment">//用户信息(一对一)</span></span><br><span class="line">  <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><u>mapper.xml</u></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询订单关联查询用户信息--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过resultMap的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrdersUserResultMap"</span>  <span class="attr">resultMap</span>=<span class="string">"OrdersUserResultMap"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            o.*,</span><br><span class="line">            u.username,</span><br><span class="line">            u.sex,</span><br><span class="line">            u.address</span><br><span class="line">        FROM</span><br><span class="line">            orders o,</span><br><span class="line">            USER u</span><br><span class="line">        WHERE</span><br><span class="line">            o.user_id = u.id;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"OrdersUserResultMap"</span> <span class="attr">type</span>=<span class="string">"cn.xiaoyao.mybatis.model.Orders"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置映射的订单信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            其中的id:指定查询列中的唯一标识,订单信息中的唯一标识</span></span><br><span class="line"><span class="comment">            column:订单信息中的列</span></span><br><span class="line"><span class="comment">            property:订单信息的唯一的标识列 所映射到Orders哪个属性中</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置订单关联查询用户的信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一个订单对应一个用户--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                association:用于映射关联查询单个对象的信息</span></span><br><span class="line"><span class="comment">                property:要将关联查询的用户信息映射到Orders中的哪个属性</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"cn.xiaoyao.mybatis.model.User"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--id:关联查询用户的唯一标识--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><u>mapper.java</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询订单关联查询用户信息(通过resultMap的方法)</span></span><br><span class="line">    <span class="function">List&lt;Orders&gt; <span class="title">findOrdersUserResultMap</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h5 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resultType：要自定义pojo 保证sql查询列和pojo的属性对应，这种方法相对较简单，所以应用广泛。</span><br><span class="line"></span><br><span class="line">resultMap：使用association完成一对一映射需要配置一个resultMap，过程有点复杂，如果要实现延迟加载就只能用resultMap实现 ，</span><br><span class="line">如果为了方便对关联信息进行解析，也可以用association将关联信息映射到pojo中方便解析。</span><br></pre></td></tr></table></figure><h3 id="一对多映射"><a href="#一对多映射" class="headerlink" title="一对多映射"></a>一对多映射</h3><h4 id="一对多关联表中的查询"><a href="#一对多关联表中的查询" class="headerlink" title="一对多关联表中的查询"></a>一对多关联表中的查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需求:要查询订单信息及订单下的订单明细信息</span><br></pre></td></tr></table></figure><p>SQL语句:</p><blockquote><p>select o.*,od.id odid,od.items_id,od.items_num<br>  from orders o,orderdetail od where o.id=od.orders_id</p></blockquote><p><strong>resultMap进行一对多映射思路:</strong></p><p><strong>resultMap提供<code>&lt;collection&gt;</code>标签完成关联信息映射到集合对象中</strong></p><h4 id="一对多中的主表的POJO类"><a href="#一对多中的主表的POJO类" class="headerlink" title="一对多中的主表的POJO类"></a>一对多中的主表的POJO类</h4><p><strong>查询订单表以及关联的订单明细信息</strong></p><h5 id="在Orders类中创建集合属性"><a href="#在Orders类中创建集合属性" class="headerlink" title="在Orders类中创建集合属性:"></a>在Orders类中创建集合属性:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xiaoyao.mybatis.model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> userId;</span><br><span class="line">  <span class="keyword">private</span> String number;</span><br><span class="line">  <span class="keyword">private</span> java.sql.Timestamp createtime;</span><br><span class="line">  <span class="keyword">private</span> String note;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//订单明细(一对多)</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;Orderdetail&gt; orderdetailList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><u>mapper.xml</u></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询订单表以及关联的订单明细信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"ordersOrderdetail"</span> <span class="attr">resultMap</span>=<span class="string">"OrdersOrderdetailMap"</span>&gt;</span></span><br><span class="line">        select o.*,od.id odid,od.items_id,od.items_num</span><br><span class="line">        from orders o,orderdetail od where o.id=od.orders_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"OrdersOrderdetailMap"</span> <span class="attr">type</span>=<span class="string">"cn.xiaoyao.mybatis.model.Orders"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置orders订单表中的信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                配置关联的ordersDetail表中的信息</span></span><br><span class="line"><span class="comment">                ofType：指定映射到list集合属性中pojo的类型(就是一对多中的List&lt;T&gt;中的泛型T的类型)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderdetailList"</span>  <span class="attr">ofType</span>=<span class="string">"cn.xiaoyao.mybatis.model.Orderdetail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"odid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_id"</span> <span class="attr">property</span>=<span class="string">"itemsId"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_num"</span> <span class="attr">property</span>=<span class="string">"itemsNum"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><u>mapper.java</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询订单关联查询订单明细表信息(通过resultMap的方法)</span></span><br><span class="line"><span class="function">List&lt;Orders&gt; <span class="title">ordersOrderdetail</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="多对多映射"><a href="#多对多映射" class="headerlink" title="多对多映射"></a>多对多映射</h3><blockquote><p>和上面的一对多写法一样  ——&gt;只是数据库中的表的关系是多对多</p></blockquote><h2 id="还使用过什么缓存框架？"><a href="#还使用过什么缓存框架？" class="headerlink" title="还使用过什么缓存框架？"></a>还使用过什么缓存框架？</h2><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="项目中如何使用Redis"><a href="#项目中如何使用Redis" class="headerlink" title="项目中如何使用Redis"></a>项目中如何使用Redis</h2><p>在springboot项目中导入redis的依赖,然后在springboot的配置文件中配置redis数据库的配置,然后在业务层中注入StringRedisTemplate类来进行对redis的数据读写操作 </p><h2 id="Redis-数据结构"><a href="#Redis-数据结构" class="headerlink" title="Redis 数据结构"></a>Redis 数据结构</h2><p>Redis支持五种数据类型：String（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p><h2 id="主从备份"><a href="#主从备份" class="headerlink" title="主从备份"></a>主从备份</h2><p>就是redis服务器实现读写分离，提高数据库服务器的性能，通过一个master服务器，只负责写的操作，然后在master服务器下连接多个slave服务器，这些服务器只负责读的操作，而主服务器进行同步数据，master数据库中的数据同步到slave服务器中。</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>事务的四大特性：</p><ol><li>原子性：</li><li>持久性：</li><li>隔离性：</li><li>一致性：</li></ol><p>事务的隔离级别:</p><ol><li>读未提交（Read Uncommitted）</li><li>读已提交（Read Committed）</li><li>可重复读（Repeated Read）</li><li>串行化（Serializable）</li></ol><p>事务的隔离级别产生的问题:</p><ol><li>脏读</li><li>不可重复读</li><li>幻读</li></ol><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>在springboot项目中导入MongoDB的依赖,然后在springboot的配置文件中配置MongoDB数据库的配置,然后在业务层中注入MongoTemplate类来进行对MongoDB的数据读写操作 </p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><blockquote><p>spring中的三大设计模式:</p><p>​    1.单例模式</p><p>​    2.工厂模式</p><p>​    3.代理模式</p></blockquote><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="饿汉"><a href="#饿汉" class="headerlink" title="饿汉"></a>饿汉</h3><h3 id="懒汉"><a href="#懒汉" class="headerlink" title="懒汉"></a>懒汉</h3><h2 id="被Spring-管理的对象默认是单例还是多例？"><a href="#被Spring-管理的对象默认是单例还是多例？" class="headerlink" title="被Spring 管理的对象默认是单例还是多例？"></a>被Spring 管理的对象默认是单例还是多例？</h2><p>单例</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="会不会前端"><a href="#会不会前端" class="headerlink" title="会不会前端"></a>会不会前端</h2><h2 id="前后端怎么分离的"><a href="#前后端怎么分离的" class="headerlink" title="前后端怎么分离的"></a>前后端怎么分离的</h2><h2 id="对MVVM的理解"><a href="#对MVVM的理解" class="headerlink" title="对MVVM的理解"></a>对MVVM的理解</h2><h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><h2 id="什么是双向绑定"><a href="#什么是双向绑定" class="headerlink" title="什么是双向绑定"></a>什么是双向绑定</h2><h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><h2 id="什么是行内标签"><a href="#什么是行内标签" class="headerlink" title="什么是行内标签"></a>什么是行内标签</h2><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><h1 id="Thymeleaf-和-jsp的区别"><a href="#Thymeleaf-和-jsp的区别" class="headerlink" title="Thymeleaf 和 jsp的区别"></a>Thymeleaf 和 jsp的区别</h1><h1 id="Servlet的作用，和SpringMVC比较有什么区别？"><a href="#Servlet的作用，和SpringMVC比较有什么区别？" class="headerlink" title="Servlet的作用，和SpringMVC比较有什么区别？"></a>Servlet的作用，和SpringMVC比较有什么区别？</h1><h1 id="Session-和-Cookie"><a href="#Session-和-Cookie" class="headerlink" title="Session 和 Cookie"></a>Session 和 Cookie</h1><h1 id="如何实现非法登陆验证"><a href="#如何实现非法登陆验证" class="headerlink" title="如何实现非法登陆验证"></a>如何实现非法登陆验证</h1><h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><h2 id="HTTP请求方式和RESTFul"><a href="#HTTP请求方式和RESTFul" class="headerlink" title="HTTP请求方式和RESTFul"></a>HTTP请求方式和RESTFul</h2><h2 id="POST-传递的参数具体是在那？"><a href="#POST-传递的参数具体是在那？" class="headerlink" title="POST 传递的参数具体是在那？"></a>POST 传递的参数具体是在那？</h2><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="项目里面解决过最复杂的问题"><a href="#项目里面解决过最复杂的问题" class="headerlink" title="项目里面解决过最复杂的问题"></a>项目里面解决过最复杂的问题</h2><h1 id="反射-1"><a href="#反射-1" class="headerlink" title="反射"></a>反射</h1><h2 id="哪里使用了反射？"><a href="#哪里使用了反射？" class="headerlink" title="哪里使用了反射？"></a>哪里使用了反射？</h2><h1 id="你了解这个项目吗？"><a href="#你了解这个项目吗？" class="headerlink" title="你了解这个项目吗？"></a>你了解这个项目吗？</h1><h1 id="短信验证码处理疯狂请求？"><a href="#短信验证码处理疯狂请求？" class="headerlink" title="短信验证码处理疯狂请求？"></a>短信验证码处理疯狂请求？</h1><h1 id="项目中的表关系"><a href="#项目中的表关系" class="headerlink" title="项目中的表关系"></a>项目中的表关系</h1><h1 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Java基础&quot;&gt;&lt;a href=&quot;#1-Java基础&quot; class=&quot;headerlink&quot; title=&quot;1.Java基础&quot;&gt;&lt;/a&gt;1.Java基础&lt;/h2&gt;&lt;h3 id=&quot;1-1简单讲一下java的跨平台的原理&quot;&gt;&lt;a href=&quot;#1-1简单讲一下ja
      
    
    </summary>
    
    
    
      <category term="Java面试题" scheme="https://xiaoyaoxiaoyao.github.io/tags/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot项目的搭建流程</title>
    <link href="https://xiaoyaoxiaoyao.github.io/2019/12/02/SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
    <id>https://xiaoyaoxiaoyao.github.io/2019/12/02/SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/</id>
    <published>2019-12-02T14:07:32.000Z</published>
    <updated>2019-12-02T14:49:02.326Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境:"></a>环境:</h3><ul><li>SpringBoot 2.2.1</li><li>idea </li></ul><h2 id="1-搭建项目所需的依赖"><a href="#1-搭建项目所需的依赖" class="headerlink" title="1.搭建项目所需的依赖"></a>1.搭建项目所需的<code>依赖</code></h2><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191202222105.png" alt=""></p><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191202222822.png" alt=""></p><p>==之后再pom.xml中还要引入JDBC的实现类druid连接池的依赖==</p><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为引入了Druid连接池,所以要进行数据库的数据源的信息的配置</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Druid的数据源</span></span><br><span class="line"><span class="attr">spring :</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">name :</span> <span class="string">vue_jf</span></span><br><span class="line">    <span class="attr">url :</span> <span class="string">jdbc:mysql://localhost:3306/vue_jf?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><blockquote><p>url : jdbc:mysql://localhost:3306/vue_jf==?useSSL=false&amp;serverTimezone=UTC== 不能少</p></blockquote><blockquote><p>因为springboot中的thymeleaf,所以不用在配置静态资源的问题</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境:&quot;&gt;&lt;/a&gt;环境:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SpringBoot 2.2.1&lt;/li&gt;
&lt;li&gt;idea &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-搭建项目所需的依赖
      
    
    </summary>
    
    
    
      <category term="SpringBoot" scheme="https://xiaoyaoxiaoyao.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 笔记</title>
    <link href="https://xiaoyaoxiaoyao.github.io/2019/11/28/Spring%20Boot%20%E7%AC%94%E8%AE%B0/"/>
    <id>https://xiaoyaoxiaoyao.github.io/2019/11/28/Spring%20Boot%20%E7%AC%94%E8%AE%B0/</id>
    <published>2019-11-28T08:58:32.356Z</published>
    <updated>2019-11-28T08:57:57.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-笔记"><a href="#Spring-Boot-笔记" class="headerlink" title="==Spring Boot 笔记=="></a>==Spring Boot 笔记==</h1><h2 id="一-Spring-Boot-简介"><a href="#一-Spring-Boot-简介" class="headerlink" title="一.Spring Boot 简介"></a>一.Spring Boot 简介</h2><h3 id="1-Spring-Boot简介"><a href="#1-Spring-Boot简介" class="headerlink" title="1.Spring Boot简介"></a>1.Spring Boot简介</h3><blockquote><p>简化Spring应用开发的一个框架</p><p>整个Spring技术栈的一个大整合</p><p>J2EE开发的一站式解决方案</p></blockquote><h3 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2.环境准备"></a>2.环境准备</h3><blockquote><p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p><p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p><p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p><p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p></blockquote><h3 id="3-Spring-Boot快速入门"><a href="#3-Spring-Boot快速入门" class="headerlink" title="3.Spring Boot快速入门"></a>3.Spring Boot快速入门</h3><p><strong>需求: 浏览器发送hello请求,服务器接收请求并处理,响应Hello World字符串</strong></p><p><strong>idea生成的springboot目录结构:</strong></p><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191128150346.png" alt=""></p><p>步骤: </p><h4 id="1-创建一个maven工程"><a href="#1-创建一个maven工程" class="headerlink" title="1.创建一个maven工程:"></a>1.创建一个maven工程:</h4><h4 id="2-导入spring-boot相关依赖"><a href="#2-导入spring-boot相关依赖" class="headerlink" title="2.导入spring boot相关依赖"></a>2.导入spring boot相关依赖</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="3-编写一个主程序-启动springboot应用"><a href="#3-编写一个主程序-启动springboot应用" class="headerlink" title="3.编写一个主程序: 启动springboot应用"></a>3.编写一个主程序: 启动springboot应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-浏览器进行访问"><a href="#5-浏览器进行访问" class="headerlink" title="5.浏览器进行访问"></a>5.浏览器进行访问</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:<span class="number">8080</span>/hello</span><br></pre></td></tr></table></figure><h2 id="二-Spring-Boot的优缺点"><a href="#二-Spring-Boot的优缺点" class="headerlink" title="二.Spring Boot的优缺点"></a>二.Spring Boot的优缺点</h2><h3 id="1-Spring-Boot-的核心功能"><a href="#1-Spring-Boot-的核心功能" class="headerlink" title="1.Spring Boot 的核心功能"></a>1.Spring Boot 的<code>核心功能</code></h3><blockquote><p>1.独立运行的Spring 项目<br>Spring Boot 可以以jar包的形式独立运行，运行一个Spring Boot 项目只需要通过 java -jar xx.jar 来运行。</p><p>2.内嵌Servlet 容器<br>Spring Boot 可以选择内嵌Tomcat、Jetty或Undertow，这样我们无须以war包形式部署项目。</p><p>3.提供starter简化Maven 配置<br>Spring 提供了一系列的starter pom 来简化Maven 的依赖加载。</p><p>4.自动配置Spring<br>Spring Boot 会根据在类路径中的jar包、类，为jar包里的类自动配置Bean，这样会极大地减少我们要使用的配置。Spring Boot只考虑了大多数的场景，并不是所有的场景。</p><p>5.生产的应用监控<br>Spring Boot 提供基于http、ssh、telnet对运行时的项目进行监控。</p><p>6.无代码生成和xml配置<br>Spring Boot不是借助代码生成来实现的，而是通过条件注解来实现的，这是spring 4.x的新特性。Spring 4.x提倡使用Java配置和注解配置组合，而Spring Boot不需要任何xml配置即可实现Spring 的所有配置。</p></blockquote><h2 id="三、Hello-World探究"><a href="#三、Hello-World探究" class="headerlink" title="三、Hello World探究"></a>三、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="父项目"><a href="#父项目" class="headerlink" title="父项目"></a>父项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br></pre></td></tr></table></figure><p>Spring Boot的版本仲裁中心；</p><p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h3 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-boot-starter-==web==:</p><p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p><h3 id="3-主程序类-主入口类"><a href="#3-主程序类-主入口类" class="headerlink" title="3.主程序类,主入口类"></a>3.主程序类,主入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191128144019.png" alt=""></p><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191128144045.png" alt=""></p><p><code>@SpringBootConfiguration</code>: springboot的配置类</p><p>​        标注在某个类上,表示这是一个springboot的配置类</p><p>​        <code>@Configuration</code>:配置类上来标注这个注解</p><p>​            配置类:  配置文件; 配置类也是容器中的一个组件; @Component </p><p><code>@EnableAutoConfiguration</code>: 开启自动配置功能</p><p>​        以前我们需要配置的东西,springboot帮我们自动配置; @EnableAutoConfiguration告诉springboot开启自动配置功能;这样自动配置才能生效;</p><p>点进去后的注解:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>@<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p><p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p><h2 id="四-配置文件"><a href="#四-配置文件" class="headerlink" title="四.配置文件"></a>四.配置文件</h2><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h3><p>springboot使用一个全局的配置文件,配置文件名是固定的;</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的作用: 修改springboot自动配置的默认值;springboot在底层都给我们自动配置好;</p><p>YAML (YAML Ain’t Markup Language)</p><p>​    YAML  A Markup Language：是一个标记语言</p><p>​    YAML   isn’t Markup Language：不是一个标记语言；</p><p>标记语言：</p><p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p><p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p><p>​    YAML：配置例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>xml: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-YAML语法"><a href="#2-YAML语法" class="headerlink" title="2.YAML语法:"></a>2.YAML语法:</h3><h4 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="string">path:/hello</span></span><br></pre></td></tr></table></figure><p>属性和值也是大小写敏感；</p><h4 id="2-值的写法"><a href="#2-值的写法" class="headerlink" title="2.值的写法"></a>2.值的写法</h4><h5 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h5><p>k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h5 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h5><p>k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> </span><br><span class="line"><span class="string">lastName:张三</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName</span> <span class="string">:</span> <span class="string">张三,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h5><p>用 - 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h4 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h4><p><strong>配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span> </span><br><span class="line"><span class="attr">lastName:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span> </span><br><span class="line"><span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">birth:</span> <span class="number">1984</span><span class="string">/11/19</span></span><br><span class="line"><span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="string">v2&#125;</span></span><br><span class="line"><span class="attr">lists:</span> <span class="string">[lisi,zhaoliu]</span></span><br><span class="line"><span class="attr">dog :</span> <span class="string">&#123;name:</span> <span class="string">tom,age</span> <span class="string">:</span> <span class="number">3</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>javaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中的配置的每一个属性的值,映射dao这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span> : 告诉springboot将本类中的所有属性和配置文件中的相关的配置进行绑定;</span></span><br><span class="line"><span class="comment"> * prefix = "person": 配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件,才能使用容器提供的<span class="doctag">@ConfigurationProperties</span>功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  String  lastName ;</span><br><span class="line">    <span class="keyword">private</span>  Integer age ;</span><br><span class="line">    <span class="keyword">private</span>  Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String ,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span>  Dog dog;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191128153530.png" alt=""></p><p>导入配置文件处理器，以后编写配置就有提示了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打印之后的person</p><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191128154000.png" alt=""></p><h5 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h5><p>调整</p><p><img src="C:/Users/laoyu/Desktop/%E6%A1%86%E6%9E%B6_itcast/spring%20boot/Spring%20Boot%20%E7%AC%94%E8%AE%B0+%E8%AF%BE%E4%BB%B6/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180130161620.png" alt="idea配置乱码"></p><h5 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h5><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h5 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><h5 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h5><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = "person")默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure><p>不来编写Spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springboot推荐给容器中添加组件的方式;推荐使用全注解的方式</p><p>1.配置类@Configuration–&gt;spring配置文件</p><p>2.使用@Bean给容器中添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Configuration</span>: 指明当前类是一个配置类;就是用来取代之前的spring配置文件 (xxx.xml)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*在配置文件中使用&lt;bean&gt;&lt;/bean&gt;标签来添加组件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加dao容器中;容器中的这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用@Bean注解给容器中注入组件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、配置文件占位符"><a href="#5、配置文件占位符" class="headerlink" title="5、配置文件占位符"></a>5、配置文件占位符</h5><h6 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h6 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h6><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure><h5 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</span><br><span class="line"></span><br><span class="line">–file:./config/</span><br><span class="line"></span><br><span class="line">–file:./</span><br><span class="line"></span><br><span class="line">–classpath:/config/</span><br><span class="line"></span><br><span class="line">–classpath:/</span><br><span class="line"></span><br><span class="line">优先级由高到底，高优先级的配置会覆盖低优先级的配置；</span><br><span class="line"></span><br><span class="line">SpringBoot会从这四个位置全部加载主配置文件；**互补配置**；</span><br></pre></td></tr></table></figure><h5 id="7-自动配置原理"><a href="#7-自动配置原理" class="headerlink" title="7.自动配置原理:"></a>7.自动配置原理:</h5><h6 id="SpringBoot启动的时候加载主配置类，开启了自动配置功能-EnableAutoConfiguration"><a href="#SpringBoot启动的时候加载主配置类，开启了自动配置功能-EnableAutoConfiguration" class="headerlink" title="SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration=="></a>SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</h6><h2 id="五-web开发"><a href="#五-web开发" class="headerlink" title="五.web开发"></a>五.web开发</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>使用SpringBoot；</p><p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p><p><strong>3）、自己编写业务代码；</strong></p><h3 id="2-模板引擎"><a href="#2-模板引擎" class="headerlink" title="2.模板引擎"></a>2.<strong>模板引擎</strong></h3><p>JSP、Velocity、Freemarker、Thymeleaf</p><p><img src="https://raw.githubusercontent.com/XiaoYaoXiaoYao/image/master/blog/20191128161721.png" alt=""></p><p>SpringBoot推荐的Thymeleaf；</p><p>语法更简单，功能更强大；</p><h4 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          2.1.6</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">切换thymeleaf版本</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf2   layout1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">"text/html"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">  <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><p>使用：</p><p>1、导入thymeleaf的名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、使用thymeleaf语法；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h4><p>1）、th:text；改变当前元素里面的文本内容；</p><pre><code>th：任意html属性；来替换原生属性的值</code></pre><p><img src="images/2018-02-04_123955.png" alt=""></p><p>2）、表达式？</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Simple</span> <span class="string">expressions:（表达式语法）</span></span><br><span class="line">    <span class="attr">Variable</span> <span class="string">Expressions: $&#123;...&#125;：获取变量值；OGNL；</span></span><br><span class="line">    <span class="attr">1）、获取对象的属性、调用方法</span></span><br><span class="line">    <span class="attr">2）、使用内置的基本对象：</span></span><br><span class="line"><span class="comment">    #ctx : the context object.</span></span><br><span class="line"><span class="comment">    #vars: the context variables.</span></span><br><span class="line"><span class="comment">                #locale : the context locale.</span></span><br><span class="line"><span class="comment">                #request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class="line"><span class="comment">                #response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class="line"><span class="comment">                #session : (only in Web Contexts) the HttpSession object.</span></span><br><span class="line"><span class="comment">                #servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class="line">                </span><br><span class="line">                <span class="attr">$&#123;session.foo&#125;</span></span><br><span class="line">            <span class="attr">3）、内置的一些工具对象：</span></span><br><span class="line"><span class="comment">#execInfo : information about the template being processed.</span></span><br><span class="line"><span class="comment">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span></span><br><span class="line"><span class="comment">#uris : methods for escaping parts of URLs/URIs</span></span><br><span class="line"><span class="comment">#conversions : methods for executing the configured conversion service (if any).</span></span><br><span class="line"><span class="comment">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class="line"><span class="comment">#calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class="line"><span class="comment">#numbers : methods for formatting numeric objects.</span></span><br><span class="line"><span class="comment">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class="line"><span class="comment">#objects : methods for objects in general.</span></span><br><span class="line"><span class="comment">#bools : methods for boolean evaluation.</span></span><br><span class="line"><span class="comment">#arrays : methods for arrays.</span></span><br><span class="line"><span class="comment">#lists : methods for lists.</span></span><br><span class="line"><span class="comment">#sets : methods for sets.</span></span><br><span class="line"><span class="comment">#maps : methods for maps.</span></span><br><span class="line"><span class="comment">#aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class="line"><span class="comment">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Selection</span> <span class="string">Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span></span><br><span class="line">    <span class="meta">补充：配合</span> <span class="string">th:object="$&#123;session.user&#125;：</span></span><br><span class="line">   <span class="meta">&lt;div</span> <span class="string">th:object="$&#123;session.user&#125;"&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Name</span>: <span class="string">&lt;span th:text="*&#123;firstName&#125;"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Surname</span>: <span class="string">&lt;span th:text="*&#123;lastName&#125;"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Nationality</span>: <span class="string">&lt;span th:text="*&#123;nationality&#125;"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="attr">&lt;/div&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">Message</span> <span class="string">Expressions: #&#123;...&#125;：获取国际化内容</span></span><br><span class="line">    <span class="attr">Link</span> <span class="string">URL Expressions: @&#123;...&#125;：定义URL；</span></span><br><span class="line">    <span class="meta">@&#123;/order/process(execId</span>=<span class="string">$&#123;execId&#125;,execType='FAST')&#125;</span></span><br><span class="line">    <span class="attr">Fragment</span> <span class="string">Expressions: ~&#123;...&#125;：片段引用表达式</span></span><br><span class="line">    <span class="meta">&lt;div</span> <span class="string">th:insert="~&#123;commons :: main&#125;"&gt;...&lt;/div&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">Literals（字面量）</span></span><br><span class="line">      <span class="attr">Text</span> <span class="string">literals: 'one text' , 'Another one!' ,…</span></span><br><span class="line">      <span class="attr">Number</span> <span class="string">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class="line">      <span class="attr">Boolean</span> <span class="string">literals: true , false</span></span><br><span class="line">      <span class="attr">Null</span> <span class="string">literal: null</span></span><br><span class="line">      <span class="attr">Literal</span> <span class="string">tokens: one , sometext , main ,…</span></span><br><span class="line"><span class="attr">Text</span> <span class="string">operations:（文本操作）</span></span><br><span class="line">    <span class="attr">String</span> <span class="string">concatenation: +</span></span><br><span class="line">    <span class="attr">Literal</span> <span class="string">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class="line"><span class="attr">Arithmetic</span> <span class="string">operations:（数学运算）</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: + , - , * , / , %</span></span><br><span class="line">    <span class="attr">Minus</span> <span class="string">sign (unary operator): -</span></span><br><span class="line"><span class="attr">Boolean</span> <span class="string">operations:（布尔运算）</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: and , or</span></span><br><span class="line">    <span class="attr">Boolean</span> <span class="string">negation (unary operator): ! , not</span></span><br><span class="line"><span class="attr">Comparisons</span> <span class="string">and equality:（比较运算）</span></span><br><span class="line">    <span class="attr">Comparators</span>: <span class="string">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class="line">    <span class="attr">Equality</span> <span class="string">operators: == , != ( eq , ne )</span></span><br><span class="line"><span class="attr">Conditional</span> <span class="string">operators:条件运算（三元运算符）</span></span><br><span class="line">    <span class="meta">If-then</span>: <span class="string">(if) ? (then)</span></span><br><span class="line">    <span class="meta">If-then-else</span>: <span class="string">(if) ? (then) : (else)</span></span><br><span class="line">    <span class="attr">Default</span>: <span class="string">(value) ?: (defaultvalue)</span></span><br><span class="line"><span class="attr">Special</span> <span class="string">tokens:</span></span><br><span class="line">    <span class="meta">No-Operation</span>: <span class="string">_</span></span><br></pre></td></tr></table></figure><h3 id="3-SpringMVC自动配置"><a href="#3-SpringMVC自动配置" class="headerlink" title="3.SpringMVC自动配置"></a>3.SpringMVC自动配置</h3><h4 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1.Spring MVC auto-configuration"></a>1.<code>Spring MVC auto-configuration</code></h4><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p></li></ul><ul><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li></ul></li></ul><h4 id="2-全面接管SpringMVC；"><a href="#2-全面接管SpringMVC；" class="headerlink" title="2.全面接管SpringMVC；"></a>2.全面接管SpringMVC；</h4><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p>我们需要在配置类中添加<code>@EnableWebMvc</code>即可</p><h3 id="4-拦截器进行登陆检查"><a href="#4-拦截器进行登陆检查" class="headerlink" title="4.拦截器进行登陆检查"></a>4.拦截器进行登陆检查</h3><p>拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆检查，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注册为组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//未登陆，返回登陆页面</span></span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限请先登陆"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已登陆，放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册拦截器</p><h4 id="1-首先将-LoginInterceptor-注入到-WebConfigurer-中。"><a href="#1-首先将-LoginInterceptor-注入到-WebConfigurer-中。" class="headerlink" title="1.首先将 LoginInterceptor 注入到 WebConfigurer 中。"></a>1.首先将 LoginInterceptor 注入到 WebConfigurer 中。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LoginInterceptor loginInterceptor;</span><br></pre></td></tr></table></figure><h4 id="2-然后在-WebConfigurer-中的-addInterceptors-中添加拦截器，使其生效。"><a href="#2-然后在-WebConfigurer-中的-addInterceptors-中添加拦截器，使其生效。" class="headerlink" title="2.然后在 WebConfigurer 中的 addInterceptors 中添加拦截器，使其生效。"></a>2.然后在 WebConfigurer 中的 addInterceptors 中添加拦截器，使其生效。</h4><pre><code>@Overridepublic void addInterceptors(InterceptorRegistry registry) {    // addPathPatterns(&quot;/**&quot;) 表示拦截所有的请求，    // excludePathPatterns(&quot;/login&quot;, &quot;/register&quot;) 表示除了登陆与注册之外，因为登陆注册不需要登陆也可以访问                        registry.addInterceptor(loginInterceptor).addPathPatterns(&quot;/**&quot;).excludePathPatterns(&quot;/login&quot;, &quot;/register&quot;);    super.addInterceptors(registry);    //较新Spring Boot的版本中这里可以直接去掉，否则会报错}</code></pre><h4 id="3-addPathPatterns-用来设置拦截路径，excludePathPatterns-用来设置白名单，也是不需要触发这个拦截器的路径。"><a href="#3-addPathPatterns-用来设置拦截路径，excludePathPatterns-用来设置白名单，也是不需要触发这个拦截器的路径。" class="headerlink" title="3.addPathPatterns 用来设置拦截路径，excludePathPatterns 用来设置白名单，也是不需要触发这个拦截器的路径。"></a>3.addPathPatterns 用来设置拦截路径，excludePathPatterns 用来设置白名单，也是不需要触发这个拦截器的路径。</h4><p> 完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> LoginInterceptor loginInterceptor;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 这个方法是用来配置静态资源的，比如html，js，css，等等</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 这个方法用来注册拦截器，我们自己写好的拦截器需要通过这里添加注册才能生效</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// addPathPatterns("/**") 表示拦截所有的请求，</span></span><br><span class="line">    <span class="comment">// excludePathPatterns("/login", "/register") 表示除了登陆与注册之外，因为登陆注册不需要登陆也可以访问</span></span><br><span class="line">    registry.addInterceptor(loginInterceptor).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/login"</span>, <span class="string">"/register"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六-SpringBoot与数据访问"><a href="#六-SpringBoot与数据访问" class="headerlink" title="六.SpringBoot与数据访问"></a>六.SpringBoot与数据访问</h2><h3 id="1-JDBC"><a href="#1-JDBC" class="headerlink" title="1.JDBC"></a>1.JDBC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据源的配置文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h3 id="2-整合MyBatis"><a href="#2-整合MyBatis" class="headerlink" title="2.整合MyBatis"></a>2.整合MyBatis</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>步骤：</p><p>​    1）、配置数据源相关属性（见上一节Druid）</p><p>​    2）、给数据库建表</p><p>​    3）、创建JavaBean</p><h4 id="1）、注解版-接口类UserMapper-java和配置文件UserMapper-xml-最后在入口类中使用MapperScan批量扫描所有的Mapper接口；"><a href="#1）、注解版-接口类UserMapper-java和配置文件UserMapper-xml-最后在入口类中使用MapperScan批量扫描所有的Mapper接口；" class="headerlink" title="1）、注解版( 接口类UserMapper.java和配置文件UserMapper.xml,最后在入口类中使用MapperScan批量扫描所有的Mapper接口；"></a>1）、注解版( 接口类UserMapper.java和配置文件UserMapper.xml,最后在入口类中使用MapperScan批量扫描所有的Mapper接口；</h4><p>@MapperScan(value = “com.atguigu.springboot.mapper”) )</p><h6 id="接口类UserMapper-java"><a href="#接口类UserMapper-java" class="headerlink" title="接口类UserMapper.java"></a>接口类UserMapper.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) values(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="配置文件UserMapper-xml"><a href="#配置文件UserMapper-xml" class="headerlink" title="配置文件UserMapper.xml"></a>配置文件UserMapper.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.jf.exam.mapper.AdminStudentMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"studentMapper"</span> <span class="attr">type</span>=<span class="string">"studentDO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sno"</span> <span class="attr">column</span>=<span class="string">"sno"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"fkClass"</span> <span class="attr">column</span>=<span class="string">"fk_class"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"modified"</span> <span class="attr">column</span>=<span class="string">"modified"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"delFlag"</span> <span class="attr">column</span>=<span class="string">"del_flag"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"_table"</span>&gt;</span></span><br><span class="line">        student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"_fields"</span>&gt;</span></span><br><span class="line">id,sno,`name`,`password`,fk_class,modified,del_flag</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"_condition"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND|OR"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null and ''!=id"</span>&gt;</span></span><br><span class="line">AND id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sno!=null and ''!=sno"</span>&gt;</span></span><br><span class="line">AND sno = #&#123;sno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and ''!=name"</span>&gt;</span></span><br><span class="line">AND `name` = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null and ''!=password"</span>&gt;</span></span><br><span class="line">AND `password` = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"fkClass!=null"</span>&gt;</span></span><br><span class="line">AND fk_class = #&#123;fkClass&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"modified!=null"</span>&gt;</span></span><br><span class="line">AND modified = #&#123;modified&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"delFlag!=null and ''!=delFlag"</span>&gt;</span></span><br><span class="line">AND del_flag = #&#123;delFlag&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"_primaryKey_condition"</span>&gt;</span></span><br><span class="line">WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"_order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sortByParams!= null and sortByParams.size()&gt;0"</span> &gt;</span></span><br><span class="line">            ORDER BY</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"sortByParams.keys"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"sortByParamKey"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">                &lt;![CDATA[$&#123;sortByParamKey&#125; $&#123;sortByParams[sortByParamKey]&#125;]]&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"studentVO"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        INSERT INTO <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_table"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null and ''!=id"</span>&gt;</span></span><br><span class="line">id,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sno!=null and ''!=sno"</span>&gt;</span></span><br><span class="line">sno,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and ''!=name"</span>&gt;</span></span><br><span class="line">`name`,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null and ''!=password"</span>&gt;</span></span><br><span class="line">`password`,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"fkClass!=null"</span>&gt;</span></span><br><span class="line">fk_class,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"modified!=null"</span>&gt;</span></span><br><span class="line">modified,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"delFlag!=null and ''!=delFlag"</span>&gt;</span></span><br><span class="line">del_flag,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"values ("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null and ''!=id"</span>&gt;</span></span><br><span class="line">#&#123;id&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sno!=null and ''!=sno"</span>&gt;</span></span><br><span class="line">#&#123;sno&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and ''!=name"</span>&gt;</span></span><br><span class="line">#&#123;name&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null and ''!=password"</span>&gt;</span></span><br><span class="line">#&#123;password&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"fkClass!=null"</span>&gt;</span></span><br><span class="line">#&#123;fkClass&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"modified!=null"</span>&gt;</span></span><br><span class="line">#&#123;modified&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"delFlag!=null and ''!=delFlag"</span>&gt;</span></span><br><span class="line">#&#123;delFlag&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateById"</span> <span class="attr">parameterType</span>=<span class="string">"studentVO"</span>&gt;</span></span><br><span class="line">        UPDATE <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_table"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sno!=null and ''!=sno"</span>&gt;</span></span><br><span class="line">sno = #&#123;sno&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and ''!=name"</span>&gt;</span></span><br><span class="line">`name` = #&#123;name&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null and ''!=password"</span>&gt;</span></span><br><span class="line">`password` = #&#123;password&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"fkClass!=null"</span>&gt;</span></span><br><span class="line">fk_class = #&#123;fkClass&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"modified!=null"</span>&gt;</span></span><br><span class="line">modified = #&#123;modified&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"delFlag!=null and ''!=delFlag"</span>&gt;</span></span><br><span class="line">del_flag = #&#123;delFlag&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_primaryKey_condition"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultMap</span>=<span class="string">"studentMapper"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_fields"</span>/&gt;</span></span><br><span class="line">        FROM <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_table"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_primaryKey_condition"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">resultMap</span>=<span class="string">"studentMapper"</span> <span class="attr">parameterType</span>=<span class="string">"studentVO"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_fields"</span>/&gt;</span></span><br><span class="line">        FROM <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_table"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_condition"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_order"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listPage"</span> <span class="attr">resultMap</span>=<span class="string">"studentMapper"</span> <span class="attr">parameterType</span>=<span class="string">"studentVO"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_fields"</span>/&gt;</span></span><br><span class="line">        FROM <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_table"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_condition"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_order"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"startRecord != null and pageSize != null and pageSize &gt;0"</span>&gt;</span></span><br><span class="line">            limit #&#123;startRecord&#125;,#&#123;pageSize&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"!(startRecord != null and pageSize != null and pageSize &gt;0)"</span>&gt;</span></span><br><span class="line">    limit 0,15</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"count"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">parameterType</span>=<span class="string">"studentVO"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        COUNT(*)</span><br><span class="line">        FROM <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_table"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_condition"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteById"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">        DELETE FROM <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_table"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"_primaryKey_condition"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listStudentAssociation"</span> <span class="attr">resultMap</span>=<span class="string">"listStudentAssociationResultMap"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">parameterType</span>=<span class="string">"com.jf.exam.pojo.vo.StudentVO"</span>&gt;</span></span><br><span class="line">            SELECT</span><br><span class="line">                s.id sid,</span><br><span class="line">                s.sno sno,</span><br><span class="line">                s.`name` sname,</span><br><span class="line">                c.id cid,</span><br><span class="line">                c.cno cno,</span><br><span class="line">                g.id gid,</span><br><span class="line">                g.`name` gname,</span><br><span class="line">                m.id mid,</span><br><span class="line">                m.`name` mname</span><br><span class="line">            FROM</span><br><span class="line">                student s</span><br><span class="line">            LEFT JOIN class c ON s.fk_class = c.id</span><br><span class="line">            LEFT JOIN grade g ON g.id = c.fk_grade</span><br><span class="line">            LEFT JOIN major m ON m.id = c.fk_major</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and ''!=name"</span>&gt;</span></span><br><span class="line">                     s.`name`= #&#123;name&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"startRecord != null and pageSize != null and pageSize &gt;0"</span>&gt;</span></span><br><span class="line">                limit #&#123;startRecord&#125;,#&#123;pageSize&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"!(startRecord != null and pageSize != null and pageSize &gt;0)"</span>&gt;</span></span><br><span class="line">                limit 0,15</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"listStudentAssociationResultMap"</span> <span class="attr">type</span>=<span class="string">"com.jf.exam.pojo.vo.StudentListVO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sno"</span> <span class="attr">property</span>=<span class="string">"sno"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sname"</span> <span class="attr">property</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"gradeDO"</span> <span class="attr">javaType</span>=<span class="string">"com.jf.exam.pojo.data.GradeDO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"gid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gname"</span> <span class="attr">property</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"classDO"</span> <span class="attr">javaType</span>=<span class="string">"com.jf.exam.pojo.data.ClassDO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cno"</span> <span class="attr">property</span>=<span class="string">"cno"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"majorDO"</span> <span class="attr">javaType</span>=<span class="string">"com.jf.exam.pojo.data.MajorDO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"mid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"mname"</span> <span class="attr">property</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="扫描所有的Mapper接口"><a href="#扫描所有的Mapper接口" class="headerlink" title="扫描所有的Mapper接口"></a>扫描所有的Mapper接口</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用MapperScan批量扫描所有的Mapper接口；</span><br><span class="line">@MapperScan(value = "com.atguigu.springboot.mapper")</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringBoot06DataMybatisApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Boot-笔记&quot;&gt;&lt;a href=&quot;#Spring-Boot-笔记&quot; class=&quot;headerlink&quot; title=&quot;==Spring Boot 笔记==&quot;&gt;&lt;/a&gt;==Spring Boot 笔记==&lt;/h1&gt;&lt;h2 id=&quot;一-Spring-
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hexo博客的搭建</title>
    <link href="https://xiaoyaoxiaoyao.github.io/2019/11/26/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA-%E5%BF%85%E7%9C%8B/"/>
    <id>https://xiaoyaoxiaoyao.github.io/2019/11/26/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA-%E5%BF%85%E7%9C%8B/</id>
    <published>2019-11-26T04:59:05.000Z</published>
    <updated>2019-11-26T06:37:33.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-博客的搭建"><a href="#Hexo-博客的搭建" class="headerlink" title="Hexo 博客的搭建"></a>Hexo 博客的搭建</h1><h2 id="前言-首先要搭建hexo博客-需要git-github账号-node-js"><a href="#前言-首先要搭建hexo博客-需要git-github账号-node-js" class="headerlink" title="前言,首先要搭建hexo博客,需要git(github账号),node.js"></a>前言,首先要搭建hexo博客,需要git(github账号),node.js</h2><h3 id="1-git"><a href="#1-git" class="headerlink" title="==1.git=="></a>==1.git==</h3><ul><li>git的安装 :  按住<code>Ctrl</code><a href="https://github.com/git-for-windows/git/releases/download/v2.24.0.windows.2/Git-2.24.0.2-64-bit.exe" target="_blank" rel="noopener">点我下载</a></li><li>安装步骤: 下载msi的文件后,双击安装,一路next,安装完成后,<kbd>win+ R</kbd></li></ul><p>输入<code>cmd</code>确定,在命令行里输入 命令:<code>git --version</code>,查看版本如下<img src="https://fffffffffffffffffffffff.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191126132532.png" alt="node的版本号"></p><h3 id="2-node-js"><a href="#2-node-js" class="headerlink" title="==2.node.js=="></a>==2.node.js==</h3><ul><li><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">点我下载Node.js</a>  :windows安装包</li><li>安装步骤: 下载msi的文件后,双击安装,一路next,安装完成后,<kbd>win+ R</kbd></li></ul><p>输入<code>cmd</code>确定,在命令行里输入 命令:<code>node -v</code>,查看版本如下<img src="https://fffffffffffffffffffffff.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191126131646.png" alt="node的版本号"></p><h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="==3.安装hexo=="></a>==3.安装hexo==</h3><ul><li>首先创建一个文件夹,用来存放博客中的东西</li><li>在新建的文件夹下鼠标右键  选择<code>git bash here</code>打开<code>git</code>命令行,输入 <kbd>npm install hexo -g</kbd>进行全局安装hexo,安装完成之后,查看版本号确认安装<code>hexo -v</code></li></ul><p><img src="https://fffffffffffffffffffffff.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191126133346.png" alt="hexo版本号"></p><ul><li>然后进行hexo 的初始化,输入<code>hexo init</code>,看到如下的列表</li></ul><p><img src="https://fffffffffffffffffffffff.oss-cn-beijing.aliyuncs.com/hexo-init.png" alt=""></p><ul><li><ul><li>node_modules：是依赖包</li><li>public：存放的是生成的页面</li><li>scaffolds：命令生成文章等的模板</li><li>source：用命令创建的各种文章</li><li>themes：主题</li><li>_config.yml：整个博客的配置</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul></li></ul><h3 id="4-Github仓库"><a href="#4-Github仓库" class="headerlink" title="==4.Github仓库=="></a>==4.Github仓库==</h3><ul><li>创建一个repo，名称为<code>yourname.github.io</code>,<u>输入的一个标点都不能错</u>, 其中yourname是你的github账号的名称，按照这个规则创建才有用，否则永远的<code>404</code>页面</li></ul><p><img src="https://fffffffffffffffffffffff.oss-cn-beijing.aliyuncs.com/create-repo.png" alt=""></p><ul><li><p>搭建好github环境之后,开始进行hexo博客的搭建</p><h4 id="4-1-config-yml的修改"><a href="#4-1-config-yml的修改" class="headerlink" title="4.1._config.yml的修改"></a>4.1.<code>_config.yml</code>的修改</h4><p>用编辑器打开你的blog项目，修改<code>_config.yml</code>文件的一些配置(冒号之后都是有一个半角空格的(<code>yaml</code>语法格式))：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-2安装hexo-deployer-git插件"><a href="#4-2安装hexo-deployer-git插件" class="headerlink" title="4.2安装hexo-deployer-git插件"></a>4.2安装<code>hexo-deployer-git</code>插件</h4>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure><h4 id="4-3-生成hexo静态页面"><a href="#4-3-生成hexo静态页面" class="headerlink" title="4.3.生成hexo静态页面"></a>4.3.生成hexo静态页面</h4><p>  回到gitbash中，进入你的博客目录，分别执行以下命令</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="5-完成效果图"><a href="#5-完成效果图" class="headerlink" title="5.完成效果图"></a>5.完成效果图</h3><p><img src="https://fffffffffffffffffffffff.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191126134958.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo-博客的搭建&quot;&gt;&lt;a href=&quot;#Hexo-博客的搭建&quot; class=&quot;headerlink&quot; title=&quot;Hexo 博客的搭建&quot;&gt;&lt;/a&gt;Hexo 博客的搭建&lt;/h1&gt;&lt;h2 id=&quot;前言-首先要搭建hexo博客-需要git-github账号-nod
      
    
    </summary>
    
    
    
      <category term="hexo博客" scheme="https://xiaoyaoxiaoyao.github.io/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xiaoyaoxiaoyao.github.io/2019/11/25/hello-world/"/>
    <id>https://xiaoyaoxiaoyao.github.io/2019/11/25/hello-world/</id>
    <published>2019-11-25T14:25:04.405Z</published>
    <updated>2019-11-25T14:25:04.406Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
